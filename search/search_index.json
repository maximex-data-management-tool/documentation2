{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"maximex User Manual","text":"<p>for IBM Maximo\u00a9, Maximo Application Suite, IBM Control Desk and TPAE based products</p> <p>maximex - Data Management Tool, previously known as Maximo Data Manager and maximex are only different names for the same software. These product names may be used interchangeably in this user manual.</p>"},{"location":"Document%20Change%20History/","title":"Document Change History","text":"Version Date Author Change Rev.001 02/01/10 DI Wolfgang Fiedler document created Rev.002 05/20/10 DI Wolfgang Fiedler various additions and clarifications Rev.002_en DI Wolfgang Fiedler English translation Rev.003 02/08/11 DI Wolfgang Fiedler Additions for Version 1.5 of the EAM Universal importer Rev.004 08/24/11 DI Wolfgang Fielder Added chapter Show Version History Rev.005 04/22/12 DI Wolfgang Fiedler Documenting new functionality (System Properties, Configuration options) Rev.006 06/13/12 DI Wolfgang Fiedler Documentation for Field Update History and EAM Power Search Rev.007 Sept. 2013 DI Wolfgang Fiedler Changes and new content for Version 2.0 Rev.008 11/01/13 Jens Abel Revision Rev.009 03/17/15 DI Wolfgang Fiedler Processing Modes \"Stop on Error\" and \"Continue on Error.  $IMPORTERROR column and related info added. Rev.010 03/17/15 DI Wolfgang Fielder Update Maximo 7.6, Additional Chapter Keyupdate and commandline tools.  Some new Screenshots. Rev.011 03/20/15 DI Wolfgang Fiedler New Version is version 3, updater to chapter 1 to reflect the  changes between version 2 and version 3. Rev.012 06/26/16 DI Wolfgang Fiedler Addition of Keywriteback Feature (chapter 3.5) generated or modified  key values are written back to the Excel import file. Two new system properties for this feature. Rev.013 January 17 DI Wolfgang Fiedler Update to Version 4; Delete feature with $DELETE column, Crontask for import,  EOL Maximo 7.1 support, new Apache POI library, nonpersistent child obejects, status change for child objects, check for admin mode when importing  ANCMbo related objects (ancestor tables) Rev.014 March 17 DI Wolfgang Fiedler Added 2 new System Properties and related functionality (minimum free Heap memory and  detailed log during import). New Crontask for periodic export. Rev.015 April 17 DI Wolfgang Fiedler Added note on memory consumption, monitoring and restart to free up memory. No chance to  influence Maxio memory management and coaching. Rev.016 August 17 DI Wolfgang Fiedler Added an important information that strings in text cells are truncated to 32767 character  (can affect LONGDESCRIPTION fields). Added new system properties to limit the  number of rowsin the search result for exportin data. Finally used the new  IBM Gold Business Partner logo in the footer. Rev.017 Jan. 18 DI Wolfgang Fiedler Added a description for the new \"DataDictionary\" workshett and the data validation for all  column with domains. Rev.018 April 18 DI Wolfgang Fiedler Update to version 5. Created a new chapter with the changes and new features introduced in  version 5. Minor updates. Rev.019 June 18 DI Wolfgang Fiedler Incorporated alternative product name \"Data Manager\" Rev.020 03/06/23 Tobias Abendroth Changed format of documentation from pdf to Markdown Rev.021 04/03/25 Tobias Abendroth Updated Prefix and updated the product name to maximex Rev.022 April 2025 Pawel Nowicki Transform to HTML Page. Rev.023 June 2025 Georg Weber Added changes for version 6.2.0 Rev.024 July 2025 Guenter Metzenr Added changes for version 6.2.0"},{"location":"about/","title":"About the Author","text":"<p>Wolfgang Fiedler is a Software Engineer, IBM Maximo Deployment Professional and    Oracle Certified Java Programmer. He is self employed and works for EAM Software    GmbH in Germany and for EAM Swiss GmbH in Switzerland. He is responsible for    designing, implementing and testing custom solutions and extensions in IBM Maximo    and SCCD. He is also the main developer for maximex.</p> <p>Comments are welcome! This manual should be as helpful as possible. Please send    comments about this publication to sales@rodias.de</p>"},{"location":"changes/","title":"Changes in recent versions","text":""},{"location":"changes/#changes-in-version-620","title":"Changes in Version 6.2.0","text":"<ul> <li>The option of restricting the visibility of the import history via a system property has been added. Property EAM.Importer.ImportHistoryFilter</li> <li>New key update setting: Mapping of keyfields for keyfield update</li> </ul>"},{"location":"changes/#changes-in-version-610","title":"Changes in Version 6.1.0","text":"<ul> <li>Added Property EAM.Importer.SheetNamePrefixSpecification</li> <li>Added support for the specification attribute data type created according to the description How do I add a Date/Time Data Type Value to a Classification Attribute</li> </ul>"},{"location":"changes/#changes-in-version-6","title":"Changes in Version 6","text":"<p>Batch Export   of large amounts of data. You can execute large data exports in the    background when the s ystem is not heavi ly used. See chapter Batch Export for more information.</p> <p>One-step multilanguage import allows you to specify the attribute value of    multilanguage enabled attributes not only for the current language of your user    session, but for several configured languages in one import file. See chapter    Multilanguage Import for more information.</p> <p>Add only and Update only Flags allows you to disable the update of existing objects    or to disable the creation of new Maximo objects during import. See chapter ADD Only    and UPDATE only Flags ($ADDONLY, $UPDATEONLY) for more information.</p> <p>Ignore empty cells is a new feature where the administrator can specify with a system    property, how empty cells in excel import files a handled. With the default behavior    the correspon ding attributes are set to NULL . The other option is that emp ty cel ls are    ignored and a special value ~null~ must be used to clear the attribute value. See    chapter Ignore empty cells in the import file for more information.</p> <p>Pre-import check script: You can now specify the name of an automation script as    system property. This script is used as a check script before the actual import starts    and allows the administrator to check for data quality, completeness , etc. from a    custom script. See chapter Pre Import Check Script for more information.</p> <p>Execute automation scripts during the import: This very powerful feature allows    you to specify automation scripts which are executed during various phases of the    import (after a new object is created, before a new or changed object is saved, etc). See    chapter Execute Automation Scripts during the import for further    information.</p> <p>Download template security allows the administrator to enable and disable    download templates for security groups. See chapter Template Security    for more information.</p> <p>DATE data type in specification attributes is now supported for import and export.    The maximum file size of am import file can now be configured with a system property.</p>"},{"location":"changes/#changes-in-version-5","title":"Changes in Version 5","text":"<p>Extended DataDictionary worksheet - The worksheet DataDictionary is created for search result download and template generatio    n and now contains detailed information for all related Maximo objects/attributes, classifications and domains. See    chapter Data Validation and the DataDictionary for more information.</p> <p>Data validation with drop-down lists for cells with domains: For attributes with    ALN, SYNONYM or NUMERIC domain the corresponding columns now have Excel data    validation configured, and you get a drop-down list with the valid domain values in the    cells. Further information is available starting in chapter Data validation    in Excel.</p> <p>Periodic Data Export in Templates: A new Crontask allows the automatic periodic    export of data from Maximo to Excel documents. With crontask parameters you define    from which Maximo application which data (via a saved query in the app) should be    exported in which download template. The result can either be saved in the file    system and/or sent via email. See chapter Periodic Export of Data with a Crontask for more information.</p> <p>Limit the memory consumption during export: The download of large search    results can lead to an excessive use of memory and to out of memory situations.    Maximo needs a lot of memory for the objects and the created Excel file needs memory    as well. With a new system property you can define how much percent of the Java    heap memory has to remain free. If the system falls below this limit the export is    aborted. See chapter Configuration Options for the EAM Importer.</p> <p>Limit the number of records to export: With new system properties it is now    possible to limit the number of records which can be downloaded from a search result.    This can be specified globally (\"EAM.Export.MaxRows\") or for each object individually    (\"EAM.Export.MaxRows.&lt;OBJECTNAME&gt;\"). If the current search result is larger than a    configured limit the export is aborted with an error message. See chapter    Configuration Options for the EAM Importer.</p> <p>Extended Searchresult download: Main object data in every row: When    downloading extended search results in an Excel document you can now specify if the    data for the main object (left of the separating column) should be inserted in every    row. This could make it easier to process the data in the Excel file (e.g. for pivot reports    or when importing the data into other systems).</p> <p>Detailed logging during data import: With the system property    \"EAM.Importer.DebugLog\" you can enable a very detailed logging during the data    import. The logfile shows which data is read from which Excel cell and how the data is    processed. This might be useful to track down problems with formulas in Excel    documents. The created log file can be downloaded from the import history dialog.</p>"},{"location":"changes/#changes-in-version-4","title":"Changes in Version 4","text":"<p>Delete records with the EAM Importer: Until now you could easily import new data or modify existing data by uploading Excel files. New in version 4 is the possibility to delete records. See chapter Delete records with Excel Import files $Delete for more information on this feature.</p> <p>End of support for Maximo 7.1, new Apache POI library: maximex internally  use the Apache POI library for reading and writing Excel Files (https://poi.apache.org/).  Due to security reasons a very recent version of this library should be used. But there is a catch: Recent version require Java 1.8 or higher which is in turn not usable with Maximo 7.1. To resolve this issue we dropped support for Maximo 7.1 and now maximex use version 3.15 of the Apache POI library.</p> <p>Support for virtual child objects in extended import (nonpersistent child objects): There are a few situations where nonpersistent child objects are used. One example is the action menu entry \"Change item number\" in the asset application. Version 4 now calls the execute() method of these nonpersistent Mbo\u2019s.</p> <p>*Status change in child objects during extended import: Up until version 4 a status change was possible only for main objects. Starting with version 4 status changes are possible for child objects during an extended import. This allows e.g. to change the status of LABORQUAL records if they are a child object of a Qualification import.</p> <p>Update key values in the Excel import file: Since the early versions of the EAM Importer Key attributes which use the Maximo AUTOKEY feature are written back in the Excel file. New in version 4 is that all key attributes of an object are compared to the values from the Excel import file and differences can be written back to the import file. This very useful if your Maximo Object uses some business logic (or some other external systems) to generate key values (the corresponding key value is not specified in the import file and the key attribute is not AUTOKEY). See chapter Handling of Key Values generated by Business Logic (not AUTOKEY) for further information.</p> <p>Cronjob for processing import files: Excel import files can be imported into the Maximo user interface (the usual method). Since version 3 you can also import files from the command line (see chapter Data import with the commandline). New in version 4: you can create a Maximo cronjob and configure a crontask instance. A crontask instance then looks for Excel import files in a specific directory and processes them. See chapter Import Excel files with a Crontask.</p> <p>Check if Admin Mode is active when importing objects with ancestor information: You can import Excel files whether Admin Mode in on or off. If Admin Mode is on, certain Maximo services are disabled, internal events are not fired and listeners might not get notified. One negative implication is, that required changes in ancestor tables are not executed when admin mode is on. At least the following object habe ancestor tables: Asset, Person, PM and WO. To avoid inconsistent data in Maximo you can only import data in those Objects (and all Objects which extend ANCMbo) if the admin mode is off.</p> <p> Illustration 3: Error message if admin mode is on during import Asset, PM, WO or Person</p>"},{"location":"changes/#changes-in-version-3","title":"Changes in Version 3","text":"<p>Support for Maximo 7.6: Version 3 of the EAM Datamanagement Tools were tested with Maximo 7.6. The installation procedure was adapted to reflect changes made by IBM in Maximo 7.5.0.7 and 7.6. See the installation manual for more information.</p> <p>Create System Properties during Installation: To make the installation of the product easier some required system properties are now created during the installation. The installation data files &lt;MAXIMO&gt;\\tools\\maximo\\EAMImport\\Importer DD*.xls now have an additional work sheet with required and optional system properties for the EAM Datamanagement Tool. Take a look at the installation data file you have used during installation and also check chapter Configuration Options for maximex.</p> <p>Data import from the commandline of the admin workstation: For previous versions the only way to import data was through the list view of the application in Maximo. Now system administrators have the possibility to import data using the commandline on the Maximo administrative workstation. This is intended to be used only by administrators (other users should not have access to the administrative workstation). This can be used for some automation. See chapter Data import with the commandline for more information.</p> <p>EAM Keyupdate: This is (together with support for Maximo 7.6) the highlight of this version. Key attributes like COMPANIES.COMPANY, ITEM.ITEMNUM, ASSET.ASSETNUM, etc. can not be changed once the record is saved. The EAM Keyupdate feature allows you to change key attributes in a consistent way directly on the database from within Maximo. Please read chapter EAM Keyupdate for more information, prerequisites and warnings.</p>"},{"location":"changes/#changes-in-version-2","title":"Changes in Version 2","text":"<p>Continue on Error Mode: With the current version of the EAM Importer it is possible to choose between two processing modes: Stop on error or continue on error. This is helpful if the import data is of lower data quality and imports may fail. See Importer Processing Modes for more information.</p> <p>Support for XLS and the new XLSX Excel file format: The current version does not use the old (and meanwhile unmaintained) jxl.jar library but uses the new and actively developed Apache POI library for the Excel file format handling. This supports the older binary Microsoft Excel file format (.xls extension) and the new Office Open XML format (.xlsx or .xlsm extension). The import therefore accepts both file formats. The file format for new Excel files generated by the Maximo/SCCD server (search result download, template download) can be controlled by a System Property in Maximo/SCCD. Default setting is the older XLS file format . With the new library there is some simple formula evaluation possible.</p> <p>Templates: To download search results you can now use predefined templates. Templates  specify which attributes you want to export and in which order they appear in the downloaded result file. It is possible to upload new templates, to associate them to the appropriate Maximo application, to manage those templates and to apply a template to the current search result (download the search result using the selected template). Templates can also be used with extended search results and specification data. For further information on this new feature read chapter EAM Data Management Tool Download Templates.</p> <p>License Keys and License Management: The current version of the EAM Data Management Tool needs two license keys in your environment. If you have bought the maximex you receive those license keys automatically. If you have not received any license keys then please contact SPIE RODIAS GmbH at  sales@rodias.de. If you want to evaluate the software you can request a (time limited) license key free of charge. This allows you to license only those modules you need only in those applications where you need them for as long as you need them. License Keys are generated per customer and are personalized with customer information.</p> <p>Specify default values for data via System Properties. This feature is useful if you want to specify some attribute values which should be applied to every import even if this attribute is not part of the import data file. See chapter Configuration Options for maximex for further information.</p> <p>Specify limits and performance data via System Properties: (e.g. maximum number of rows for an import, maximum number of errors during an import, suppression of the creation of the data dictionary in the result files). The corresponding System Properties are explained in chapter Configuration Options for the EAM Data Management Tools.</p>"},{"location":"overview/","title":"Product Overview","text":"<p>This manual describes the different components of \u201emaximex\". maximex is not one single Tool and it is not a Maximo    application itself. maximex is a collection of several    independent tools. Illustration 1: Components of maximex    shows its components:</p> <p> Illustration 1: Components of maximex </p> <p>The main components are:    The EAM Mass Delete or Batch delete program allows you to delete all records    which are currently shown in the list view of your Maximo application.     See chapter EAM Mass Delete for further information.</p> <p>The EAM Fieldupdater allows you to set one or more attributes for a group of records (selected records in the list view of an application) or for related records which can be specified via a relation. See chapter EAM Fieldupdater. You can limit the attributes and relations available for update with the EAM Fieldupdater with the EAM Enter allowed Fields for Update Tool menu option. This is further explained in chapter EAM Fieldupdater Select - allowed relations and attributes.</p> <p>The EAM Power Search allows you to search for records in the list view of Maximo applications. You can use any persistent attribute of the Maximo object and not just those available in the Advanced Search dialog. For more information refer to chapter EAM Power Search.</p> <p>The EAM Keyupdater allows you to change key attribute values in your maximo installation. More information is available in chapter EAM Keyupdate.</p> <p>New member of maximex are some commandline scripts which allow the user to upload import files and templates from the commandline. See chapter Data import with the commandline starting.</p> <p>The EAM Importer for IBM Maximo is the main component of maximex and provides several valuable functions.  It allows the import of new data, the modification of existing data and the deletion of data in IBM Maximo. As a prerequisite the data must be available in the Microsoft Excel document format. The EAM Importer also contains functionality for creating import templates and to download the current records in the list view of an application into Microsoft Excel. The main part of the following user manual is dedicated to the EAM Importer.  </p> <ul> <li>Chapter EAM Importer - General explains some general concepts  </li> <li>Chapter maximex - Simple Import explains the simple Import. The simple import is explained in more detail because it explains the base concepts.  </li> <li>Chapter maximex - Specification Import explains the import of specification data and  </li> <li>Chapter maximex - Extended Import explains the import of extended data.  </li> <li>A new and useful feature called Templates are described in chapter EAM Data Management Tool - Download Templates  </li> <li>Chapter Delete records with Excel Import files - $Delete explains the new $Delete feature.</li> </ul> <p>One question remains: Where can I find maximex in Maximo? maximex is a menu option in the Select Action menu on the list view tab of your Maximo installation. (This of course depends on several factors like license, security group,...) Illustration 2: Select Action Menu for EAM Data Management Tool from page 12 shows all those menu entries.</p> <p> Illustration 2: Select Action Menu for maximex</p>"},{"location":"preface/","title":"Preface","text":"<p>This user manual describes the components, the usage and the features of maximex Version 6.    You should study this user manual if</p> <ul> <li>you want to use maximex in Maximo or IBM Control    Desk (formerly known as Smartcloud Control Desk SCCD)</li> <li>you want to import existing data from Excel into Maximo </li> <li>you want to export data from Maximo to Excel </li> <li>you want to update or delete large amounts of data wit h a simple interface</li> </ul> <p>Using the tools is usually quite easy and intuitive. If you are familiar with your Maximo    or IBM Control Desk environment, then it should be easy to use the EAM Data    Management Tool.!    However, especially the EAM Importer is quite compl    ex and it is recommended that!    you read this manual. This can help you to avoid some pitfalls, save some time in the    long run and gives you some tips when working with the tool.    The manual assumes that the tool is already installed in your environment. This    manual does not contain any installation instructions. This is a separate PDF file which    you should have received together with maximex software    package and your license keys.</p> <p>Users of a previous version of maximex (or the EAM Universal    XLS Import/Update Tool) should also read this user manual. Some functionality is new,    other parts of the software are improved. The main changes and improvements of    this new version are summarized in chapter Changes in recent versions (Chapter 4)</p> <p>The screenshots in this manual where created using different Maximo versions    (Maximo Asset Management 6.2.8, Maximo 7.1.1.x, Maximo 7.5.0.x with tivoli09 skin,    Maximo 7.5.0.x with tivoli13 skin, SCCD 7.5.1 with tivoli13 skin, Maximo 7.6), different    browsers (Internet Explorer, Mozilla Firefox, Google Chrome; all in different version)    and different client operating systems (various Windows and Ubuntu Linux version s).    Depending on your environment your dialogs may and will look different.</p> <p>This manual often uses the phrase \"Maximo application\". This does not imply any limit and is just for easy readability. You can install and use the EAM Data Management    Tools in every system based on the Tivoli Processing Automation Engine (TPAE) 7.5 or    7.6. You can use the software in \"power apps\" (an application like Assets with a list    view and detail view(s) of one record) and in \"single page apps\" (like Currency Codes,    Exchange Rates, Conditional Expression Manager,...). You can even use the software    in custom applications which you have developed yourself or applications installed by    some industry solutions (Service Provider, Transportation, Oil and Gas, Asset    Configuration Manager,...)</p> <p>We appreciate our feedback. Please help to make the sample library extensive and    valuable.    If you have created an import template which  </p> <ul> <li>is useful for other users or customers  </li> <li>is not yet included in the sample library  </li> <li>does not violate any privacy, confidentiality polices of your company  </li> <li>you are willing to share with the community    then please send your template to sales@rodias.de    We are happy to include your contribution into the sample library (on your request    without details of the sender). If required we will make the data anonymous.</li> </ul>"},{"location":"UserGuide/ADD_only_and_UPDATE_only_Flags/","title":"ADD Only and UPDATE only Flags ($ADDONLY, $UPDATEONLY)","text":"<p>The import files can contain new records or already existing records to update. The tool automatically decides whether a record needs to be added or updated and uses the unique id column and the primary key colu mns of the objects for this decision. It is sometimes useful only to add new records, but not modify already existing ones. It is also sometimes useful only to modify existing records, but not to add new records to Maximo. Two new special attribute names can now be added to your import file to accomplish this configuration: $ADDONLY: If this is set to 1 then this row of the import file will be added, if it is not already available in Maximo. A already existing Maximo object for this row wo uld not be updated. Any changes to an existing object are ignored!  $UPDATEONLY: A existing Maximo object is updated, but no new object is created.    </p> <p>How to use this feature:  Simply add a column $ADDONLY or $UPDATEONLY (or both) and set it to the value 1</p> <p></p> <p>$ADDONLY and $UPDATEONLY can be used with the Simple and Extended Import modes.</p>"},{"location":"UserGuide/Batch%20Export/","title":"Batch Export","text":"<p>The export of larger amounts of data is time consuming and resource intensive (see also chapter 17). The batch export feature allows you to execute a template download in the background and download the generated spreadsheet files later from a dialog in Maximo.</p> <p>Note:  </p> <ul> <li>Batch export is only available in combination with Download Templates.  </li> <li>Download Templates for the batch export can only have one worksheet.  </li> <li>Batch export is available for simple, extended and specification download.</li> </ul>"},{"location":"UserGuide/Batch%20Export/#template-download-immediate-or-batch-export","title":"Template Download: Immediate or Batch Export","text":"<p>To create a batch export:  </p> <ul> <li>Filter your data in the listview of the Maximo application  </li> <li>Select the \"EAM Searchresult Download via Template\" menu entry from the select action menu or the searchbar.</li> </ul> <p></p> <p>In the dialog select the \"Create Batch Ex port Job?\" checkbox to queue the download in the background.</p>"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/","title":"Configuration Options for maximex","text":"<p>Some behavior of maximex can be finetuned with System Properties directly in Maximo. All of the following System Properties are optional! The only two required system properties are EAM.DatamanagementTool.AppKey and EAM.DataManagementTool.ModuleKey and contain the license keys for the application. These two properties are described in the installation manual.</p>"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#configuration-options-for-the-eam-importer","title":"Configuration Options for the EAM Importer","text":""},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#property-eamimporterdisablexlssendback","title":"Property EAM.Importer:DisableXLSSendBack","text":"<p>This system property controls if the processed XLS file is sent back to the client after the import process. If you do not want the file to be sent back to the client, then set this to true. If this system property is missing, has no value or has a value of false then the processed XLS File is sent back to the client.</p>"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#property-eamimportermaxrows","title":"Property EAM.Importer.MaxRows","text":"<p>This system property allows you to limit the maximum number of rows in a XLS file to import. If the number of data rows in the XLS worksheet exceeds the given number of rows an error message is displayed and the import is not started. The property EAM.Importer.MaxRows is a global setting. It sets the limit for all Maximo applications where the importer is enabled for. You can however set a specific limit for every Maximo object (but you don't have to). For example: You want a limit of 500 records as a default but want a limit of 200 records for the ASSET object then you set the Global Value for the EAM.Importer.MaxRows property to 500 and create a new property EAM.Importer.MaxRows.ASSET with a global value of 200. It is possible to create a specific row limit for every Maximo object by creating a system property with the property name of EAM.Importer.MaxRows.&lt;MBONAME&gt;. Please note that you have to specify the name of the Maximo business object in UPPERCASE!. The limit is then used for every import in an application which has the specified object als main object.</p>"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#property-eamimportertemplatesdisabledd","title":"Property EAM.Importer.Templates.DisableDD","text":"<p>This system property disables the creation of the DataDictionary worksheet in all the templates created by the EAM Import tool (simple template, extended template and specification template).</p>"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#property-eamimportersearchresultsdisabledd","title":"Property EAM.Importer.Searchresults.DisableDD","text":"<p>This system property disables the creation of the DataDictionary worksheet in all the search results downloaded by the EAM Import tool (simple searchresult, searchresult with specification data and extended search result download).</p>"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#property-eamimportersearchresultswriteyornas10","title":"Property EAM.Importer.Searchresults.WriteYORNas10","text":"<p>If this system property is set YORN attributes are not exported with Y and N but with 1 and 0. The major advantage of this is, that files with 1 and 0 for YORN can be imported in any language in Maximo. If Y and N are used, then the file can not be imported with e.g. german language setting because Y is not a valid YORN value. In german the values are J for \"Ja\" and N for \"Nein\".</p>"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#property-eamimporterobjectnameattributename","title":"Property EAM.Importer.&lt;OBJECTNAME&gt;.&lt;ATTRIBUTENAME&gt;","text":"<p>You are now able to define default values for Maximo attributes which are used during the import  with the EAM importer. The naming convention for the system property name is: EAM.Importer.Default.&lt;OBJECTNAME&gt;.&lt;ATTRIBUTENAME&gt;</p> <p>The defined default value from the System Property is ignored if there is a column for this attribute in the XLS import file! Example: The default value for WORKORDER.WORKTYPE should be PRBLM Property EAM.Importer.Default.WORKORDER.WORKTYPE  </p> <p></p> <p>You can define several default value entries for a given Maximo Object (e.g. EAM.Importer.Default.WORKORDER.WORKTYPE and EAM.Importer.Default.WORKORDER.WOPRIORITY).</p>"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#property-eamimporterimportmodesleeptime","title":"Property EAM.Importer.&lt;IMPORTMODE&gt;.SLEEPTIME","text":"<p>With the System Property EAM.Importer.&lt;IMPORTMODE&gt;.SLEEPTIME you can define a time duration in Milliseconds. After processing a row for simple import and specification import or one row of the main object for extended import, the importer waits for the specified duration. The load on the Maximo infrastructure is reduced because the task is spread over a longer period of time. The import process will not consume all the resources it can get and Maximo keeps to be responsive to the other users. The sleep time can be defined for every import mode separatley.</p> <p></p>"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#property-eammassdeletesleeptime","title":"Property EAM.MassDelete.SLEEPTIME","text":"<p>Similar to the SLEEPTIME property for the import here is also a System Property EAM.MassDelete.SLEEPTIME. This property defines the sleep time after deleting one record.</p> <p></p> <p>The answer to the question of which the correct values for those SLEEPTIME Parameters are, depend on several variables. Chances are they are not required at all because your application server has enough resources (multi CPU, multi core, cluster) or large imports are executed off hours. If you will rarely MassDelete larger amounts of data you can do without the MassDelete.SLEEPTIME Parameter. If the usage of MassDelete evidentially causes slow system performance for other users the \"EAM.MassDelete.SLEEPTIME\" parameter should be set starting with 50. This will cause a delay of 5 seconds for a deletion of 100 objects but therefore other users will notice fewer delay.</p>"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#property-eamimporterexcelformat","title":"Property EAM.Importer.ExcelFormat","text":"<p>The searchresult download and the tamplate generation (For simple, extended and specification mode) will create new excel documents on the application server and send them back to the user. By default those file are created in the older binary Microsoft Excel fileformat with the .xls extension. If you create the system property EAM.Importer.ExcelFormat with the value XLSX the new Excel documents are created in the new XML based XLSX format.</p> <p></p> <p>If this system property is missing or the value is not XLSX the older excel file format is used</p>"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#property-eamimporterkeywritebackifempty","title":"Property EAM.Importer.KeyWriteback.IfEmpty","text":"<p>EAM Datamanagement Tools from September 2016 onwards have the ability to write the key attributes of a maximo object back to the excel import file. This is useful if your do not specifiy your key value in the Excel import file, but if the Maximo object is generating the key in the business logic or the key value is obtained from another external source. The system property EAM.Importer.KeyWriteback.IfEmpty enables the importer to write back generated key values if they are not specified in the Excel import file.</p> <p></p> <p>Existing key values in the Excel import file are not overwritten by default. See the  system property EAM.Importer.KeyWriteback.RewriteChanged if you want to enable this feature.</p>"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#property-eamimporterkeywritebackrewritechanged","title":"Property EAM.Importer.KeyWriteback.RewriteChanged","text":"<p>In addition to the above setting you can also allow the importer to overwrite key values you have specified in your Excel import file if they have changed in the maximo object. e.g. you have specified a key value, but the business logic decided to use another value (or just convert it to uppercase).</p> <p></p> <p>The default value for this system property is false so that user specified values in the Excel import file are not overwritten.</p>"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#property-eamimporterminfreeheappct","title":"Property EAM.Importer.MinFreeHeapPct","text":"<p>During the export maximex check periodically the amount of free memory. If the free memory falls below a configured limit the export of data is aborted. The limit can be configured with the System Property \"EAM.Importer.MinFreeHeapPct\". See chapter 11.2 Aborting the export for a description of this feature.</p> <p></p> <p>The default value for this system property is 10 percent.</p>"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#property-eamimporterdebuglog","title":"Property EAM.Importer.DebugLog","text":"<p>If you suspect problems in your Excel import file it is possible to enable a detailed log which is created during the import and can then be downloaded from the import history dialog. This logfile shows you exactly which data was read from your input fi le. It also shows how the import process is deciding whether to create a new object or to modify an existing one.</p> <p></p> <p>The default value for this system property is 0 (log disabled).</p>"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#property-eamimportersheetnameprefixspecification","title":"Property EAM.Importer.SheetNamePrefixSpecification","text":"<p>When importing (or exporting) specifications, Excel sheets are used (one sheet per specification):</p> <p></p> <p>The default name of the sheet used by maximex is build like: Specification_+Specification-ID.  If long strings are used as Specification-IDs, the name of the sheet may exceed the maximum name length  allowed in Excel (31 characters). To solve this problem, you can use this property and set a shorter prefix  for the specification sheet name.</p> <p>For example, if you set EAM.Importer.SheetNamePrefixSpecification=Spec_, then the sheet name will look like this</p> <p></p>"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#property-eamimporterimporthistoryfilter","title":"Property EAM.Importer.ImportHistoryFilter","text":"<p>Since version 6.2.0 To restrict the results list in the \u201cData Importer History\u201d dialog, predefined filter values can be set using  this property. Possible values are:</p> Value Description &lt;Empty&gt; no filter PERSON only the imports of the logged-in user SITE only imports of users from the same site as the logged-in user PERSONGROUP only the imports of users from the same persongroup as the logged-in user LOCATIONSITE only the imports of users from the same locationsite as the logged-in user LOCATIONORG only the imports of users from the same locationorg as the logged-in user <p>The default value for this system property is &lt;EMPTY&gt; (no filter).</p> <p>The \u2018ORGID\u2019 and \u2018SITEID\u2019 columns have been added to the EAMIMPORT table for this feature.  These fields are only filled automatically for new entries, but not for existing entries. To fill the values in existing entries, the following SQL statements can serve as an example. Once the values have been filled, it is no longer possible to recognize how the entries were filled.</p> <pre><code>-- fills ORGID and SITEID with orgid and siteid of the user who entered the entry\nupdate EAMIMPORT set SITEID = (select DEFSITE from MAXUSER where userid = ENTERBY) where SITEID is null;\nupdate EAMIMPORT set ORGID  = (select ORGID from SITE where siteid = (select DEFSITE from MAXUSER where userid = ENTERBY))) where ORGID  is null;\n</code></pre> Property Name EAM.Importer.ImportHistoryFilter Description Filter for visibility of EAM Imports in Import History Global Value &lt;Empty&gt; (no filter) Global Only? TRUE Live Refresh? TRUE Security Level SECURE Nulls Allowed? TRUE Data Type ALN"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#configuration-options-for-the-eam-exporter","title":"Configuration Options for the EAM Exporter","text":""},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#property-eamexportmaxrows","title":"Property EAM.Export.MaxRows","text":"<p>This system property allows you to limit the maximum number of rows which can be downloaded into searchresult downloads (either simple, extended or spec) or into templates. If the number of rows in your current searchresult is greater than the configured limit a error message is displayed and the searchresult download is not started. The property EAM.Export.MaxRows is a global setting. It sets the limit for all Maximo objects/applications where the user can download search results. You can however set a specific limit for every Maximo object (but you don't have to). For example: You want a limit of 500 records as a default but want a limit of 200 records for the ASSET application then you set the Global Value for the EAM.Export.MaxRows property to 500 and create a new property EAM.Export.MaxRows.ASSET with a global value of 200. The object name must be specified in UPPERCASE! It is possible to create a specific row limit for every Maximo object by creating a system property with the property name of EAM.Importer.MaxRows.&lt;MBONAME&gt;. Also note that you have to use the name of the Maximo business object and not the name of an application.</p>"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#configuration-options-for-the-eam-fieldupdater","title":"Configuration Options for the EAM Fieldupdater","text":""},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#property-eamfieldupdatelogging","title":"Property EAM.FIELDUPDATE.LOGGING","text":"<p>Data changes with the EAM Fieldupdater (see chapter EAM Fieldupdater) can be logged and reviewed later in the Fieldupdater History dialog (see chapter EAM Fieldupdater History). By default, this logging is not enabled. You can enable the logging anytime by creating a system property EAM.FIELDUPDATE.LOGGING (data type YORN) with the value 1.</p> <p></p>"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#property-eamfieldupdatemaxrecords","title":"Property EAM.FIELDUPDATE.MAXRECORDS","text":"<p>The maximum number of records which can be updated at the same time with the EAM Fieldupdater is not limited by default. The administrator can create a system property EAM.FIELDUPDATE.MAXRECORDS to limit the number of records for each Fieldupdater invocation.</p> <p></p>"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#property-eamfieldupdatemaxerrors","title":"Property EAM.FIELDUPDATE.MAXERRORS","text":"<p>Default behaviour of the EAM Fieldupdater is to continue with the next record/attribute in case of an error. An error could be an invalid value for a attribute (not in valuelist, wrong datatype) or the field validator is not happy with the entered value or the attribute or mbo are readonly. If you want the Fieldupdater to quit after a specified number of errors occurred, you can set the system property EAM.FIELDUPDATE.MAXERRORS. This integer specifies the maximum number of errors which are \"allowed\". If this number of errors is reached the fieldupdater stops executing the current update.</p> <p></p>"},{"location":"UserGuide/Configuration%20Options%20for%20maximex/#property-eamdatamanagementtoolenablefieldmapping","title":"Property EAM.DATAMANAGEMENTTOOL.ENABLEFIELDMAPPING","text":"<p>Since version 6.2.0 Mapping of keyfields for keyfield update (If property is not existing, logic is deactivated by default)</p> <p>Possible values are: </p> Value Description true logic activated false logic deactivated"},{"location":"UserGuide/Data%20Validation%20and%20the%20DataDictionary/","title":"Data Validation and the DataDictionary","text":"<p>The previous chapters explained how you can download empty Excel templates (see chapters 6.1.2 Download a XLS Template , 7.2 Download a Template with specification data and 8.2 Download a Template for the extended import on more information on how to download templates for the Simple, Specification and Extended Import). It is also possible to download the current search result of your application either as a simple list or with specification data or child objects. See the chapters 6.1.3 Download a Search Result as an Excel Template , 7.3 Download a search result with specification data and 8.3 Download a search result with extended data for further information on this functionality).  </p> <p>All of those generated Excel files contain a worksheet called \"DataDictionary\". This worksheet contains the following information (if you have the EAM Datamanagement Tools V4 Rev. 3330 or later installed):</p> <ul> <li>Detailed information about all the affected Maximo objects  </li> <li>Detailed information about all affected Classifications  </li> <li>Information abo ut referenced ALN, SYNONYM and NUMERIC domains including the defined values from maximo.</li> </ul>"},{"location":"UserGuide/Data%20Validation%20and%20the%20DataDictionary/#maximo-object-information","title":"Maximo Object Information","text":"<p>For every Maximo object which is part of the data, detailed information about the attributes is included in the worksheet. For a simple template or a Simple Searchresult download the main object of the applications is included. If the excel file is an extended template or extended search result download, then the child objects are also included in the \"DataDictionary\". The \"DataDictionary\" is displayed as a table with the following columns:</p> <p></p> <p>Illustration 37: Data Dictionary for the object attribute information</p> Column Explanation Objectname Name of the Maximo Object Attribute Number A unique attribute number Name The name attribute Title the attribute title isKey ? Contains \"true\" if the attribtue is part of the primary key isUniqueIDName ? Contains \"true\" if the attribute is the unique ID fo the object AutoKeyName The name of the autokey primKeyColSeq. The sequence of this attribute in the primary key SameasObject.SameasAttribute Sameas Information for the attribute isRequired ? Contains \"true\" if the attribute is required Default Contains the default value from the database configuration DomainID Contains the DomainID for this attribute MaxType Contains the Maximo Datatype for the attribute Length The maximum length of the attribute (useful for ALN,UPPER) Scale the scale for DECIMAL, FLOAT, AMOUNT, ... datatypes isNumeric ? Contains \"true\" if the attribute / Datatype is numeric <p>The first object is always the main object of the application. The information for other objects (child objects for the extended template or search result) follow below the main object.</p>"},{"location":"UserGuide/Data%20Validation%20and%20the%20DataDictionary/#maximo-classifications-specifications","title":"Maximo Classifications / Specifications","text":"<p>Information about all the affected classifications is also included in the \"DataDictionary\" and is displayed below the objects. This information is only available if you create a specification template or execute a search result download with specification data.</p> <p>The following screenshot shows a sample output:</p> <p> Illustration 38: Specification attributes in the data dictionary worksheet</p> <p>The output contains the following data:</p> Column Explanation ClassstructureID The CLASSSTRUCTUREID of the classification ClassificationID The CLASSIFICATIONID of the classification Hierarcypath The hierarchypath of the classification Classification Description The description for the classification Attribute The classification attribtue name Attribute Description The description for the classification/specification attribute Datatype The datatype for the attribute DomainID The Domain ID for the attribute MeasureunitID The unique MeasureunitID for this attribute <p>The specifications are printed in the order they are encountered during data export or specified in the dialog during template generation.</p>"},{"location":"UserGuide/Data%20Validation%20and%20the%20DataDictionary/#domains-and-domain-values","title":"Domains and Domain Values","text":"<p>The final group of objects which are included in the new \"DataDictionary\" are the used ALN, SYNONYM and NUMERIC domains and their configured domain values. The \"DataDictionary\" for objects and specifications contains a column DomainID (see previous chapters). If the domain is a ALN or NUMERIC domain, then the value and description are included in the \"DataDictionary\". For SYNONYM domains the internal value (MAXVALUE) is included in the \"DataDictionary\". The domains are printed starting from column S (right to the main object information) in the order in which they are encountered during data export or template generation. The following screenshot shows the first few domains of the ASSET object with their values.</p> <p> Illustration 39: Domain information in the \"DataDictionary\"</p>"},{"location":"UserGuide/Data%20Validation%20and%20the%20DataDictionary/#data-validation-in-excel","title":"Data validation in Excel","text":"<p>The information from the \"DataDictionary\" worksheet is used for data validation in the other worksheets. This is a new feature which is available starting with EAM Datamanagement Tools V4 Rev 3330.</p> <p>If the attribute has a domain in the database configuration (and in the data dictionary), then the name of the domain is inserted as a cell comment in the second row of the worksheet (the cell with the attribute name).</p> <p>The following screenshot shows a part of a search result download from the ASSET application. Every attribute with a domain has a cell comment (recognizable by the red dot in the cell) which contains the name of the domain (ASSET.STATUS only allows values from the domain LOCASSETSTATUS).</p> <p> Illustratino 40: Domain name as cell comment</p> <p>If the domain is a ALN, SYNONYM or NUMERIC domain, then the valid values are also included in the \"DataDictionary\" worksheet.  </p> <p>For all columns where there is a ALN, SYNONYM or NUMERIC domain there is also an Excel Data Validation configured and you can select a valid value from a drop down box in the excel cell. This data validation references the valid domain values from the datadictionary.  </p> <p>If you delete the \"DataDictionary\" sheet you should also remove the data validations from all of your cells. Failing to do so will result in invalid data validation formulas and invalid references. If you choose not to generate the \"DataDictionary\" worksheet (see chapter 12.1 Configuration Options for the EAM Importer) then the data validation is not created since the \"DataDictionary\" worksheet is a prerequisite for the data validation.</p> <p>If domain values are changed/added/deleted the datadictionary does not change automatically. You have to change the domain manually.</p> <p> Illustration 41: Drop-down list to select a valid value for an attribute with a domain</p> <p>If you enter a value which is not a valid domain value, then Excel will display the following warning message:</p> <p> Illustration 42: Warning message if you enter a value which is not a valid domain value</p> <p>If you select \"OK\" your entered value is stored in the cell despite being not a valid domain value. If you select \"Cancel\" the previous value is restored.</p>"},{"location":"UserGuide/Data%20import%20with%20the%20commandline/","title":"Data import with the commandline","text":"<p>For some usage scenarios it is useful to use the commandline (e.g. an automated procedure which creates a test environment out of a copy of the production environment). For this reason we ship two commandline .bat files which can be used to import files and templates into maximo from the Windows commandline. After the installation of maximex the following files are in the directory &lt; MAXIMO &gt;\\tools\\maximo :  </p> <ul> <li>90EAMImport.bat  </li> <li>91EAMUploadTemplate.bat</li> </ul>"},{"location":"UserGuide/Data%20import%20with%20the%20commandline/#import-files-with-90eamimportbat","title":"Import files with 90EAMImport.bat","text":"<p>D:\\IBM\\SMP\\maximo\\tools\\maximo&gt;90EAMImport.bat-?</p> <p>.:: EAMInstaller Version 1.2 ::. - Copyright (c) 2010 EAM Software GmbH - Visit http://www.eam software.de for latest news - Released under the terms of the EAM License version  </p> <p>-&gt; Command line parameters are u (username) : Username for server connection (Defaultvalue: maxadmin) p (password) : Password for server connection (Defaultvalue: maxadmin) s (server) : Connection String for RMI connection Format: server:port ServerName Defaultvalue: localhost:13400/MXServer) l (language) : Indicates the install language. Language must be available in MAXIMO! a (application) : MAXIMO application like ASSET, LOCATION,... f (filename) : Excel import filename (e.g. Assets.xls) d (destination dir) : If a destination directory is set the n the processed XLS(X) is saved there.</p> <p>The parameters are similar to the installation scripts. The following example imports the file D:\\temp\\CURRENCY_1.xls into the Maximo application CURRENCY. The processed import file is saved in the directory D:\\temp\\imported\\</p> <p>D:\\IBM\\SMP\\maximo\\tools\\maximo&gt;90EAMImport.bat -umaxadmin -pA17vi8.1 -llocalhost:13400/MXServer -lde -aCURRENCY -fD:\\temp\\CURRENCY_1.xls -dD:\\temp\\imported</p> <p>.:: EAMInstaller Version 1.2 ::. - Copyright (c) 2010 EAM Software GmbH - Visit http://www.eam software.de for latest news - Released under the terms of the EAM License version  </p> <p>Proceed with command line arguments: application : CURRENCY username : maxadmin filename : D:\\temp\\CURRENCY_1.xls server : localhost:13400/MXServer language : de saveprocessed : D:\\temp\\imported password : A17vi8.1</p> <p>Mon Mar 16 23:41:23 CET 2015 Connecting to MAXIMO Server:localhost:13400/MXServer as User maxadmin Mon Mar 16 23:41:23 CET 2015 Connected with Site HQ and Language DE 0 Records inserted 17 Records updated 0 Records skipped 0 Records with error Mon Mar 16 23:41:25 CET 2015 Importscript successful (took 0.623 Seconds) Session disconnected!</p> <p>For the commandline import it is required that the Importer is licensed for the application. As the console output above shows an import summary is displayed. If the -d argument is not supplied in the commandline, then the processed import file is not sent back to the client. The imported file and the processed file are stored in the import history and can be downloaded later from there.</p>"},{"location":"UserGuide/Data%20import%20with%20the%20commandline/#template-upload-with-91eamuploadtemplatesbat","title":"Template Upload with 91EAMUploadTemplates.bat","text":"<p>Similar to the import of data from the commandline there is also the possibility to upload download templates with the script 91EAMUploadTemplates.bat. The commandline parameters are identical to the script 90EAMImport.bat above.</p>"},{"location":"UserGuide/EAM%20Data%20Management%20Tool%20-%20Download%20Templates/","title":"EAM Data Management Tool - Download Templates","text":"<p>The download of search results (either simple, extended or specification download) includes nearly all attributes of the Maximo object in the generated Excel file. This has some drawbacks:  </p> <ul> <li>A lot of columns are used with data which often is not required. You may hit the 256 column limit of the older XLS file format.  </li> <li>Depending on how many rows your result set contains and on how many attribute s are to be exported, the application server will address more or less memory.  </li> </ul> <p>To resolve these drawbacks it is now possible to upload templates into Maximo where you can specify exactly which attributes in which order you want to export. A template is ag ain a Excel file and has the same structure and layout like an import file. The template module in maximex allows you to:  </p> <ul> <li>Upload a new Template into Maximo and assign it to the appropriate Maximo application  </li> <li>Manage your Templates for t he current Maximo application (rename, delete, download)  </li> <li>Apply a template to the current search results This functionality is very useful for simple exporting or reporting tasks where you need specific attributes in specific columns. Your templates may al so include some macros or VBA code which processes the exported data, generates consolidated reports, creates diagrams, and so on.</li> </ul> <p>The main advantages of this new functions are:  </p> <ul> <li>Only those attributes are included in the XLS file which are really needed. Th e created Excel documents are smaller and easier to handle and are better suited for re import back into Maximo.  </li> <li>The resource consumption on the application server is reduced (both time and memory)  </li> <li>Your download templates can include additional worksheets which can contain macros, diagrams, </li> </ul> <p>Especially the fact that additional worksheets are allowed and preserved in download templates gives you great flexibility. Those additional worksheets can do some calculations with the raw data, create accumulated data or pivot tables or create some diagrams for a graphical representation of your data. Additional worksheets could also be optimized for printing and macros can automatically recalculate some data when the excel document is opened. The template download fea ture can be used for simple reporting tasks.</p>"},{"location":"UserGuide/EAM%20Data%20Management%20Tool%20-%20Download%20Templates/#create-a-template","title":"Create a Template","text":"<p>Templates are essentially Excel import files without any import data. Below are some rules and guidelines for the templates:  </p> <ul> <li>Templates can either be in the older XLS or the newer XLSX or XLSM f ile format.  </li> <li>The worksheets inside of the template must conform to the naming convention for the corresponding import mode.  </li> <li>\"Other\" worksheets (worksheet names not starting with Simple or Extended_) remain untouched and are still available in the final result. </li> <li>Macros or VBA code is also preserved. </li> <li>Any available data rows in the template will be deleted when the template is used to download a search result.  </li> <li>For specification templates: you can specify the attributes for the main object as expected. However, you can not define which specification attributes should be included in the export.  </li> <li>Use a unique and meaningful file name for your template.</li> </ul>"},{"location":"UserGuide/EAM%20Data%20Management%20Tool%20-%20Download%20Templates/#upload-template","title":"Upload Template","text":"<p>Before you can use a template to download search results, Maximo must know about the template. You have to upload your template once into the application where you later want to use the download template. For one specific Maximo application you can upload any number of download template (with different content for different purposes). To upload a new Template into your application open the list view of your Maximo application and select the entry \"EAM Upload Template\" from the Select Action menu (see Illustration 33: Select Action menu item EAM Upload Template).</p> <p> Illustration 33: Select Action menu item EAM Upload Template</p> <p>Upload Template is a new Action Menu item and opens the following dialog:  Illustration 34: Upload new Template dialog</p> <p>Select your template from the file system and click \"Upload as Template\".</p>"},{"location":"UserGuide/EAM%20Data%20Management%20Tool%20-%20Download%20Templates/#manage-template","title":"Manage Template","text":"<p>The Select Action menu entry \"EAM Manage Download Templates\" opens the following dialog:</p> <p> Illustration 35: Manage Download Templates dialog</p> <p>Within this dialog you can:  </p> <ul> <li>Change the template name (by simply modifying the attribute Template Name in the dialog). The template name is used as a part of the file name  </li> <li>Download the template from the server to your client. You could then view the current contents of your template (which attributes are in the template and at which position). You could make changes to the template and upload it again.  </li> <li>Delete the template.</li> </ul>"},{"location":"UserGuide/EAM%20Data%20Management%20Tool%20-%20Download%20Templates/#search-result-download-via-template","title":"Search result Download via Template","text":"<p>Once you have selected the data in the list view you can open the following dialog with the Select Action Menu item \"EAM Download Searchresult via Template\":  </p> <p> Illustration 36: Download Searchresult into Template - Apply Template</p> <p>The dialog shows the templates which where previously uploaded and assigned to the current Maximo application along with the creation date and the name of the user who imported the template. Here you can also see templates uploaded by other users and use them.   If your download template contains worksheet for extended data (main object separation column child object) and you want the main object attributes filled in in every row for the child object than check the checkbox. Select the template you want to use by clicking on the template name. The current search result will be inserted into the template and the final Excel result file is sent to your browser. The filename of the final XLS file will be consisting of the filename of the template and the current timestamp appended behind.</p>"},{"location":"UserGuide/EAM%20Data%20Management%20Tool%20-%20Download%20Templates/#template-security","title":"Template Security","text":"<p>With the default setting of the data manager all users (who can download into a download template) can see all the available download templates suitable for the current application . This is usually no issue if only the administrator or power users are using the tool. If regular users (from different security groups and with different roles) are using the template download feature, it is useful that you can configure the visibility of the download templates. To enable the template security feature, you set the Maximo system property EAM.TemplateSecurity.Enabled \" to 1. Once this feature is enabled users can only see download templates where access was granted. This flag also displays a new tab with the name \"Data Manager Templates\" in the Security Groups application.</p> <p></p> <p>Select the application in the first table. The second table then shows all download templates suitable for the application. Here you can grant the access to the download templates for the current security group. The top right of the tab contains a checkbox with the label \" Authorize Group for New Data Management Tool Download Templates?\". If you set this checkbox, then new download templates are automatically authorized for this user group.</p> <p></p>"},{"location":"UserGuide/EAM%20Fieldupdater/","title":"EAM Fieldupdater","text":"<p>In standard Maximo system it is intended to change one record at a time, then save your changes and then move to the next record. Keeping your data in Maximo up to date can sometimes mean to change an attribute in a lot of records which might be a daunting task in Maximo. One possible solution is of course the EAM Importer. You can export your data to Excel, there edit it and then re-import it into Maximo. Another possible solution for this task is presented in this chapter: The EAM Fieldupdater.</p> <p>The EAM Fieldupdater allows you to update field values in objects of the current search result or in related objects which can be selected via a relation.</p> <p>Note:  To avoid this being a security risk the Maximo administrator can define the available attributes and relations with the tool \"EAM Enter allowed Fields for Update Tool\"! It is very important that this step is not skipped and only those fields and relations are explicitly allowed which should be available in the EAM Fieldupdater. By default, all relations and attributes are available in the EAM Fieldupdater. This setting also limit the relations which can be selected when downloading a XLS Extended Template or a search result with extended data.</p> <p>To use the EAM Fieldupdater follow there steps:  </p> <ol> <li> <p>Set a filter to select the records you want to change</p> </li> <li> <p>Start the EAM Fieldupdater from the action menu:</p> <p> Illustration 46: Select Action menu item EAM Fieldupdater</p> <p>Selecting this menu item opens the EAM Fieldupdater dialog. Illustration 47: EAM Fieldupdater dialog; change attribute DEPARTMENT to IT shows the dialog with an example where a user sets the attribute DEPARTMENT for all records of the current search result in the list view to the value IT.</p> <p> Illustration 47: EAM Fieldupdater dialog; change attribute DEPARTMENT to IT</p> </li> <li> <p>Add a row for every field you want to change.</p> </li> <li> <p>If you do not select a relation you can set values for the attributes of the main       object of the current application. For \"Field name\" you can choose from the       available and allowed fields for the current objects.</p> </li> <li>If you select a relation from the list of available and allowed relations f or the       object the \"Field name\" only allows you to enter field names of the       corresponding child object of this relation.</li> <li>Insert the new attribute value in \"Field value\". This is a required field. If you       want to clear the attribute value (set to NULL), then insert the special value       ~null~</li> <li>If you want to append the given value to the already existing value then select       the checkbox \"Append ?\" (see illustration 48)<ol> <li>Example: Some records are selected in the ASSET Application and you open the EAM      Fieldupdater from the action menu. If you want to update fields from the ASSET object      itself then you do not choose a relation and you can select from the available and      allowed field names of the ASSET object. </li> <li>If you intend to update the the description of all the SPAREPARTS for your ASSETS in the search result you select the relation \"SPAREPART\". The lookup for Field name only shows you the available and allowed attributes for the SPAREPART object where you can select DESCRIPTION.</li> <li> Illustration 48: Append a string to a description with the fieldupdater</li> </ol> </li> <li>For Field value you enter the new field value. If the \"Append\" check box is not       checked, the given field value will be set on the given attributes replacing the       old value, otherwise the given value is appended to the current value of the       specified attribute.</li> <li>If you want to change more than one attribute you can add new rows and       specify other attributes.</li> <li>Click OK to start the update process. A confirmation message is shown</li> </ol> <p> Illustration 49: Confirmation Question for the EAM Fieldupdater</p> <ol> <li>If you confirm the system message with Yes, the fields are changed and the ilst view is updated.</li> </ol> <p>NOTICE:  If there is an error during the Update (e.g. read only attribute, string too long, date format not valid, inserted value not in value list,...) then the update is NOT interrupted but continues. All error messages are collected and shown at the end of the update.</p> <p>The main advantages of the EAM Fieldupdater:</p> <ul> <li>You save time (and money) because time consuming record by record updates can be replaced by a few clicks.  </li> <li>No necessity for direct updates with SQL code in the Maximo Database! Direct manipulation in the database is dangerous and requires SQL knowledge (which also depends on the database system). The EAM Fieldupdater uses the Maximo Business Objects (Mbo's). This is secure, complies with your  business logic reflected in the Mbos, and of course also recognizes the security settings and data restrictions.  </li> <li>Mass data updates via the Fieldupdater are suggested to be performed by power user s of your Maximo installation. If at all SQL updates in the database were usually done by administrators only.  </li> <li>Easy update of virtual attributes of the Maximo objects (like longdescription). This is no so straightforward with SQL since the longdescription is a separate database table.  </li> <li>Current data and easy data maintenance leads to greater acceptance and satisfied users.</li> </ul>"},{"location":"UserGuide/EAM%20Fieldupdater/#eam-fieldupdater-select-allowed-relations-and-attributes","title":"EAM Fieldupdater - Select allowed relations and attributes","text":"<p>By default the EAM Fieldupdater allows the user to choose from all defined relations and all available attributes from the current main object.</p> <p>There are two main reasons why the administrator should specify the allowed fields and relations:</p> <ol> <li>Security . Without limitation the user could change fields which might otherwise    not be visible in the User Interface. Or the user could change fields in objects (via a    relation) where the user otherwise might not have access to in the first place.</li> <li>Usability . For every Maximo object there is a large number of relations defined.    They are mostly used internally to gather related information for objects and are    not intended to update or modify information.</li> </ol> <p>To specify the allowed relations and attributes follow these steps:</p> <p>Select the menu option \"EAM Enter allowed Fields for Update Tool\" from    the action menu of the application.</p> <p> Illustration 59: Select Action menu item EAM Enter allowed Fields for Update Tool</p> <p>This opens a dialog which shows the currently allowed fields and relations for the current application.</p> <p> Illustration 51: EAM Fieldupdater Filter Configuration dialog in Maximo 6.2</p> <p>Note: If there are no restrictions for the current parent object then the list is empty and no restrictions are effective. All relations and attributes are available in the EAM Fieldupdater!</p> <p>As soon as you specify at least one attribute or relation everything is forbidden except the now explicitly allowed relations or attributes.</p> <p>This dialog allows you to specify allowed fields and relations. There are three possible ways to accomplish this:  </p> <ol> <li>To allow the update of a field in the current object to updated via the EAM    Fieldupdater select the field from the lookup of the Field name control without    specifying a relation.</li> <li>To allow the update of all attributes in a specific child objec t in the EAM    Fieldupdater select the relation name to the child object from the lookup near the    Relation control.</li> <li>To allow the update of one specific attribute in a child object in the EAM Fieldupdater select the relation name to the child object. Then select the attribute    from Field name lookup which now shows all attributes of the child object.</li> </ol> <p>After you have finished the definition of permissable attributes and relations you click    OK and your settings are saved in Maximo.</p> <p>You can change your settings any time you want. Please also note that these settings    are common for all Maximo users and security groups and can not be defined for    users or security groups individually.</p>"},{"location":"UserGuide/EAM%20Fieldupdater/#eam-fieldupdater-history","title":"EAM Fieldupdater History","text":"<p>Depending on the configuration of maximex Field Updater each update process is logged.</p> <p> Illustration 52: EAM Fieldupdater History dialog</p> <p>The Field Update History Dialog contains a main table and a details table. For each Field Update run there is one entry in the main table which shows the date, time, duration number of affected rows and the rows with errors.</p> <p>The details table below the main table shows for every affected object the Object name, the relationship from the main object to the target object (if any), the attribute title, theold attribute value, the new attribute value, a success indicator and a update log.</p> <p>If the field update for the object was successful, the update log contains information to uniquely identify the object. In case of an error a Maximo error message is also displayed and shows the reason for the error.</p> <p>The following screenshot shows the error messages if you want to change the installation date of some assets to the value \"invaliddate\", which is clearly not a date:</p> <p> Illustration 53: Field Updater Histroy with error messages due to an invalid date</p>"},{"location":"UserGuide/EAM%20Keyupdate/","title":"EAM Keyupdate","text":"<p>Key attributes like ASSETNUM in Assets, LOCATION in location, ITEMNUM for items and so on can be defined during creation of the Maximo Objects. These key attributes are later used in various other tables within the maximo database. Maximo does use \"foreign keys\" or \"cascaded updates\" in the database, therefore key attributes can not be changed later from within Maximo.</p> <p>On the other hand there might be valid reasons why we want to change key attributes later. These could be:  </p> <ul> <li>Naming conventions have changed o r new conventions are adopted. Often the old key attribute values do not adhere to the new conventions.  </li> <li>Company names have changed due to mergers and acquisitions  </li> <li>Mistakes during data entry in key attributes should be corrected  </li> <li>Required changes during upgrades of Maximo or consolidation of different Maximo systems into one.</li> </ul> <p>Accurate key values allow easier integration and data exchange with other systems and also reduce the risk of data entry errors.</p> <p>Maximo does not use \"foreign keys\" in the database directly, but stores the same information in its own tables. E.g. the attribute ASSETNUM in the ASSETMETER object is defined to be \"Same as Object\" ASSET and \"Same as Attribute\" ASSETNUM. If you change the length or datatype of the key attribute ASSE TNUM in the ASSET object, Maximo also changes all the related attributes in the other tables identified by the SAMEASOBJECT and SAMEASATTRIBUTE relations.</p> <p>The SAMEASOBJECT and SAMEASATTRIBUTE information can be used to identify all possible tables and attr ibutes which can contain a key values. If for example you want to change the ITEMNUM of one item in your inventory the SAMEAS information can be used to identify all attributes where the ITEMNUM is possibly stored in.</p> <p>The EAM Keyupdate feature used exactly this SAMEASOBJECT and SAMEASATTRIBUTE information to create the SQL statements. Only if the SAMEAS information is complete and valid all occurrences of a key can be identified and renamed. Incomplete information in the database configuration such as missing SAMEASOBJECT and SAMEASATTRIBUTE data leads to inconsistent data after the keyupdate because not all occurrences are renamed.</p>"},{"location":"UserGuide/EAM%20Keyupdate/#eam-keyupdate-warnings-and-important-information","title":"EAM Keyupdate: Warnings and important information","text":"<p>When using the EAM Keyupdate please pay attention to the following:  </p> <ul> <li>Access to the SIGOPTION for EAM Keyupdate should only be granted to those users and groups, who know what they are doing.  </li> <li>The EAM Keyupdate tool executed SQL statetements directly in the Maximo database. Test your keyupdate imports in a test environment.  </li> <li>Create a backup of your maximo database bevor using the EAM Keyupdate  </li> <li>Make sure that the SAMEASOBJECT and SAMEASATTRIBUTE information in your database configuration application is complete and correct. Only then all occurrences can be changed and the data is consi stent.  </li> <li>Field validator classes and Maximo business logic is not executed when working with SQL statements on the database directly. You have to make sure that the new values for the key attributes are valid in your Maximo environment. Do not write lowercase data in Maximo attributes which are defined with datatype UPPER (a lot of them are; it would be allowed in the Maximo UI) and check the length of your key attributes.  </li> <li>Enable the Admin mode in the database configuration before using the EAM Keyupdate. With this precaution changes in the Maximo database can not interfere with running integrations or crontasks or other users changing the same data. The admin mode is required unless you create the System Property \u201e EAM.Importer.KeyUpdate.NoAdminMode\" with a value other than 0.  </li> <li>The EAM Keyupdate software tries to verify the new value for the key attribute. It creates a new object in the current application and sets the new key value into the key attribute. The EAM Keyupdater then reads back the value from the object and uses this value for the future processing. If the value which was read back from the Object is different from the value in the Import file (because the value was converted to uppercase or the fieldvalidator somehow changed the value), then the new value is also written back into the excel file. This check of the new key attribute values can be skipped if you set the System Property \u201e EAM.Importer.KeyUpdate.SkipKeyValueCheck\" to a value other than 0.</li> </ul>"},{"location":"UserGuide/EAM%20Keyupdate/#layout-and-content-of-the-keyupdate-import-file","title":"Layout and COntent of the Keyupdate Import File","text":"<p>The EAM Keyupdate feature uses a Excel import file as datasource. The basic layout is similar to the usual import files used to import and update data with the EAM Importer. The conventions for the keyupdate import file is as follows:  </p> <ul> <li>The name of the excel worksheet must start with the prefix \u201eKeyupdate_\"  </li> <li>The second row of the worksheet contains the attribute names. This information is used by the tools and therefore required.  </li> <li>The first row usually contains th e attribute titles (in the users language). This row is optional and can be empty. This information is filled in if you start with a search result download or a generated template.  </li> <li>The third row contains sample data and can also be left empty.  </li> <li>The user dat a which is processed by the EAM Keyupdater starts in row four! (as with the importer)  </li> <li>For system level objects (CONDITION, CURRENCY, MAXGROUP, MAXUSER, PERSON, SITE, \u2026) two columns are required in the keyupdate import file: The key attribute of the object (e.g. PERSON) and the key attribute with the prefix \u201e$NEW_\" (e.g. $NEW_PERSON). The column with the key attribute contains the current (old) value, and the column $NEW_&lt;attributename&gt; contains the new value for the key attribute.  </li> <li>ORG level, SITE level, ITE MSET level or COMPSET level Maximo objects also need the attributes ORGID, SITEID, ITEMSETID or COMPSETID in the keyupdate import file to uniquely identify the record.  </li> <li>Other column/attributes can be included in the file but are ignored.</li> </ul> <p>The following screenshot shows a keyupdate import file for ITEM data. This keyupdate import changes the ITEMNUM of three items in the ITEM table and all related data.</p> <p> Illustration 58: Keyupdate import file for ITEM</p>"},{"location":"UserGuide/EAM%20Keyupdate/#mode-of-operation","title":"Mode of Operation","text":"<p>The EAM Keyupdate is available in the Select Action Menu in the list view of your application (if you have installed maximex for the application and granted access to the SIGOPTIONS in the security group application).</p> <p> Illustration 59: Select Action Menu with EAM Keyattribute Update option</p> <p>This action opens the following dialog which displays some warning again:</p> <p> Illustration 60: EAM Keyupdate Warnings and Information dialog</p> <p>The user has to indicate that he has read and unterstood the information by selecting the corresponding checkbox. After that select the button \"Continue\" which opens the following Import dialog:</p> <p> Illustration 61: EAM Keyupdate file upload dialog</p> <p>Select the keyupdate import file and click the \u201eExecute Keyupdate\" button. If there is an error during processing the import file the import will abort and a errormessage is displayed to the user. Similar to the normal data import the processed Excel file is sent back to the client. Also the import summary is displayed and the involved records are shown in the list view.</p> <p>Two additional columns are added to the import file during processing:  </p> <ol> <li>the column $KEYUPD_RESULT holds the overall result for processing this row    of data. This is either OK with light green background or Error with a red    background.  </li> <li>The column $KEYUPD_LOG contains all the SQL Statements which where    executed against the database and the number of affected records. These    SQL statements where executed within a single database transaction. So if the    $KEYUPD_RESULT is OK then all of the SQL statements where executed    successfully. Otherwise none of the SQL statements was saved and the    transaction was rolled back.</li> </ol> <p>The following screenshot displays the processed keyupdate import file after updating    some ITEMNUMs in the ITEM application:</p> <p> Illustration 62: Processed Keyupdate import file for ITEM application</p> <p>The originally uploaded keyupdate import file and the processed file are also saved in the EAM import history.</p> <p> Illustration 63: Import history dialog with keyupdate entry in ITEM application</p>"},{"location":"UserGuide/EAM%20Keyupdate/#mapping-of-keyfields","title":"Mapping of keyfields","text":"<p>Since version 6.2.0 During the use of this function we recognized a problem with the level field (SITEID, ORGID, ITEMSETID,...) in the excel file. The problem occured, if there is more than one field of this kind in a table. For example:  If you want to update the location of an asset, there are some tables that have more than one field with \"same as\" siteid.  In this case it would be e.g. the table TICKET with the fields siteid (of course) and assetsiteid.  To update the location, the program creates an update sql that searches for the location field and the siteid field in table. But if you want the programm to look for assetsiteid, it was not possible until now. That could lead to some problems.</p> <p>For this problem, there is now a solution:</p> <p>First: There is a system property: EAM.DATAMANAGEMENTTOOL.ENABLEFIELDMAPPING if the value is true, the new logic is activated. (false or the absenese of this property means: logic is not activated. The processing is like before)</p> <p>Second: There is a automation script with name: EAM_CHECK_IMPORT_RULE (In future versions, it is planed, that the name is not fix, but given by the excel sheet). Within this script, you can define the exceptions.</p> <p>e.g. First line of script</p> <pre><code>result = \"\"\n</code></pre> <p>Then, we have the exception: In this case for the ticket problem</p> <pre><code>if (table == \"TICKET\" and field2update == \"LOCATION\" and fixedKeyAttribute == \"SITEID\"):\n    result = \"ASSETSITEID\"\n</code></pre> <p>So the first line of each exception is always the same. Only the values in the \"\" changes. This line says: If we want to update the field LOCATION in table TICKET on level SITEID, then the update command should not look after SITEID, but ASSETSITEID Or in short: Not      update TICKET set LOCATION = 'LOC2' where LOCATION is 'LOC1' and SITEID = 'SITE1' but     update TICKET set LOCATION = 'LOC2' where LOCATION is 'LOC1' and ASSETSITEID = 'SITE1'</p> <p>Third: If the new logic is activated, and the program finds a table, that has more than on field, that is same as the level, it will look into the scrtipt to find a solution. If nothing is found, it will raise an error, with exact information about the problem</p> <p> Illustration 64: Example for error message</p> <p>This picture shows also an example of the script with the correct values</p> <pre><code>if (table == 'TICKET' and field2update == 'LOCATION' and fixedKeyAttribute == 'SITEID':\nresult = 'Gew\u00e4hlter Wert aus [SITEID, REORDFROMSTORESITEID]'.\n</code></pre> <p>You can use this lines for the script. The only thing, that has to be changed are the ' -&gt; \"  and of course the values in the result line In this example, you can change the lines above to </p> <pre><code>if (table == \"TICKET\" and field2update == \"LOCATION\" and fixedKeyAttribute == \"SITEID\":\n    result = \"SITEID\"\n</code></pre> <p>and add the lines to the script.</p> <p> Illustration 65: Automation Script</p>"},{"location":"UserGuide/EAM%20Mass%20Delete/","title":"EAM Mass Delete","text":"<p>If you want to delete one single record in your Maximo application the default \"Delete....\" Select Action menu entry in the main tab is sufficient. But what if you have a list of 500 old records which need to be deleted?. DELETE SQL statements in the Maximo database are quite dangerous and if you are not very careful and have a good knowledge of the internal data structures it is very likely, that orphaned data remains in the system. To help you save time we have developed the EAM Mass Delete. The \"EAM Mass delete\" or Batch delete is a simple, powerful application. But its a potentially destructive application too. Access should only be granted to administrators and only in those applications where it makes sense. The tool \"EAM Mass delete\" deletes all IBM Maximo objects in the current list view of the application. It has the same effect as if you select each object, view it in the main tab of the application and select \"Delete \u2026.\" from the action menu of the application. If there is an error during the delete process (e.g. deletion is not allowed) then the process is NOT interrupted but continues with the next object. Error messages are collected and shown to the user at the end of the batch delete operation.</p> <p>To use the tool follow the following instructions:  </p> <ol> <li>Specify filter criteria or use the advanced search to show the records you want to    delete in the list view of the application.  </li> <li>Select the \"EAM Mass delete\" menu option from the action menu</li> </ol> <p> Illustration 55: Select Action menu item EAM Mass delete</p> <ol> <li>The tool shows a confirmation dialog</li> </ol> <p> Illustration 56: EAM mass delete confirmation question dialog</p> <ol> <li>Please make sure that you really want to delete the records. Click yes if you are.</li> <li>If there are errors during the delete process a dialog box is shown to the user. E.g. if oyu wanted to delete 5 Purchase Orders (PO Objects) you will get the following error message:</li> </ol> <p> Illustration 57: EAM Mass delete collected error messages</p> <ol> <li>After the Mass delete is finished and a possible system message is closed the list view of the application is updated.</li> </ol> <p>The main advantages of the EAM Mass delete functionality:</p> <ul> <li>It recognizes the business logic. If a delete of an object in Maximo deletes dependent objects the Mass delete will delete those dependent objects a s well.  </li> <li>If a delete is not allowed with the standard \"Delete ...\" menu item in the detail view of the record, then it can not be deleted with the Mass Delete option.  </li> <li>At the end of the Mass delete you get a detailed protocoll.  </li> <li>No direct database access for dangerous Delete SQL queries required! You can close these security holes.</li> </ul>"},{"location":"UserGuide/EAM%20Power%20Search/","title":"EAM Power Search","text":"<p>The EAM Power Search allows you for search for objects in the list view of the application. You can start the EAM Power Search dialog from the select action menu or the search bar menu ( or the sidebar if the sidebar is active).</p> <p>The major advantages over the standard Advanced Search Dialog are: </p> <ul> <li>You can use any persistent attribute in your search and not only those available in the Advanced Search Dialog. (Sometimes the Advanced Search Dial og is not updated when you add custom attributes to your objects.)  </li> <li>You can also use relations to child objects</li> </ul> <p>The example below shows a search which returns all Assets where SITEID is equal to BEDFORD and description contains the string \"pump\" and ITEMNUM 20778 is an existing sparepart.</p> <p> Illustration 54: EAM Power Search dialog with sample search criteria</p>"},{"location":"UserGuide/EAM%20Show%20Import%20History/","title":"EAM Show Import History","text":"<p>The action menu entry \"EAM Show Import History\" gives the user an overview of the past imports in the current Maximo/SCCD application. This gives you an overview of how this tool is used. It also allows you to download past imports or imports from other users in the current Maximo/SCCD application. These downloaded files can be a good starting point for your new imports or for updating previously imported data. You could also use a previously imported file as a template (see EAM Data Management Tool Download Templates for more information about download templates.</p> <p>The user can find the EAM Show Import History menu option alongside the other EAM Data Management Tool men u options in the list view of your Maximo application (see Illustration 43: EAM Show Import History Select Action menu item).</p> <p> Illustration 43: EAM Show Import History Select Action menu item</p> <p>If you select this menu item the Show Import History dialog  is opened (see Illustration 44: Show Import History dialog).</p> <p> Illustration 44: Show Import History dialog</p> <p>This Dialog shows the following information: </p> <ul> <li>Importnumber; this is the internal unique ID of the import  </li> <li>Importfile Name; the original name of the import file which was uploaded by the user into Maximo  </li> <li>Import Mode; indicates the used Import Mode for the given Excel file. Possible values are SIMPLE, EXTENDED and SPEC.  </li> <li>Import Status; indicates if the import was successful or if a error occurred. Possible values are: OK, FAILED, XLS ERROR, XLS EMPTY, NO LICENSE, IN PARTS OK and ERRORS  </li> <li>Enter by shows which user executed the import  </li> <li>Enter date shows the timestamp of the import  </li> <li>Inserted Rows shows the number of new main object s created during the import of the given XLS file  </li> <li>Updates Rows shows the number of main objects which where updates during the import  </li> <li>Skipped Rows shows the number of records which where skipped because the corresponding Mbo was readonly and could not be modified at all.  </li> <li>Deleted Mainobj. Shows the number of main objects which where deleted from Maximo. Records which where not available in Maximo and where therefore not created are not counted.  </li> <li>Deleted Childobj shows the number of child ob jects which where deleted directly from Maximo. Child objects which are deleted by the Maximo business logic when you delete a main objects are not included.  </li> <li>Errors is the number of errors. If no $ImportError column is available in your worksheet the error count could be 0 or 1. With an $ImportError column (Continue on Error mode) the error count could be greater than 1.  </li> <li>The first download icon allows the download of the original XLS file which was sent to the Maximo server  </li> <li>The second download icon allows th e download of the result XLS file that was sent back to the client after the import process. This file contains usually the unique ID values of the objects which where written back to the XLS file during the import process.  </li> <li>The last icon allows you to download a detailed log which war created during the import. The logfile shows which data was read from the excel file and how the importer decides whether to create a new object or modify an existing object. This feature is useful if you suspect an error in y our input file or the EAM Datamanagement Tool importer component itself. To enable logging you have to set the system property \u201e EAM.Importer.DebugLog\" to 1 (default value is 0; no logfile is created or stored).</li> </ul> <p>The records in the dialog can be filtered to show only those with a selected import mode, a selected Status, a given user name...</p> <p>The import history can also be used to download previously successfully imported files and use them as template for future imports. Only the imports for the current application are shown in the dialog starting with the most recent import. Access to this action menu entry can be granted in the security groups in the same way as for the other action menu entries for maximex. </p> <p> Illustration 45: Import History with Continue on Error Mode</p> <p>The import Status OK in the Import History dialog shows that the import completed without any errors. On the other hand FAILED indicates that there was an error and the import was aborted after this error. An errormessage was displayed to the user.</p> <p>With the new Continue on Error Mode (see 5.15.1 Importer Processing Modes) there is  now a new Import Status called ERRORS which is set when one or more import errors occurred in Continue on Error mode.</p> <p>The recent versions of the import history dialog also display the error count. In the older versions error count was either 0 or 1 and this corresponds to Import status OK and FAILED respectively.</p>"},{"location":"UserGuide/Execute%20Automation%20Scripts%20during%20the%20import/","title":"Execute Automation Scripts during the import","text":"<p>A very powerful new feature of the Maximo data manager V6 is the possibility to execute automation scripts during the import process. This enables the power user or administrator to:  </p> <ul> <li>Add custom logic during the import  </li> <li>Call Maximo business objects functions which are otherwise only available in dialogs or Select Action menu entries.  </li> </ul> <p>There are different \"launchpoints\" where a custom automation script can be triggered:  </p> <ul> <li>After a new Maximo object is created (e.g. to set some default  </li> <li>Right before a Maximo MboSe t is saved (e.g. to add some custom validation of the data)  </li> <li>Right after a Maximo MboSet is saved (e.g. send some notification)  </li> <li>Before or after specification attributes are set  </li> </ul> <p>This \"launchpoints\" for automation scripts correspond to special attribute names in your import file.</p> Attribute Name Description $SCRIPT.PRE.SAVE.MBOSET Automation Script executed before the main object MboSet is saved $SCRIPT.POST.SAVE.MBOSET Automation Script executed after the main object MboSet is saved $SCRIPT.POST.CREATE.MAINOBJECTMBO Automation Script executed after the main object MboSet is saved $SCRIPT.PRE.UPDATE.MAINOBJECTMBO Automation Script executed before a existing Maximo object is updated $SCRIPT.PRE.UPDATE.SPECATTRIBUTES Automation Script executed before the specification attributes of a Maximo object are updated $SCRIPT.POST.UPDATE.SPECATTRIBUTES Automation Script executed after all specification attributes of a Maximo object were updated $SCRIPT.POST.CREATE.CHILDOBJECTMBO Automation Script executed after a new child object Mbo is created (only used for the extended Import Mode) $SCRIPT.POST.SETATTRIBUTES.CHILDOBJECTMBO Automation Script executed after all the attributes were set on the child object <p>The automation scripts are called with the following context parameters:</p> Parameter Name Description userinfo The Maximo UserInfo object for the current user mbo The Mbo that corresponds to the current row in the excel sheet (might be new or already exisiting) scriptname The name of the Automation Script row A org.apache.poi.ss.usermodel.Row object with the current row in the excel sheet parentrow The row of the parent object. This is only available for the extended import importlauchpoint The name of the launchpoint (see table above) parent the current eamimport object <p>The following screenshot shows how you can call the automation script \"STOREROOM_PRESAVE\" before the import module saves the MboSet with the new or updated data.</p> <p>The automation script itself could look like this: </p>"},{"location":"UserGuide/Ignore%20empty%20cells%20in%20the%20import%20file/","title":"Ignore empty cells in the import file","text":"<p>Let us assume, that you have an excel import file and some attributes are empty. The default functionality during import is that the corresponding Maximo object attributes are cleared (set to a NULL value). Sometimes this is not the desired behavior. Since version 6 there is a new Maximo system property \"EAM.Importer.IgnoreEmptyCells\". If this property is set to 1, empty cells in the import file are ignored and the corresponding Maximo attribute is not cleared (set to NULL). If you want to set a object attribute to NULL when this feature is active, then use the special value \"~NULL~\" in the import file cell.</p>"},{"location":"UserGuide/Import%20Excel%20files%20with%20a%20Crontask/","title":"Import Excel files with a Crontask","text":"<p>There are cases where you have to import the same kind of data in the same Maximo application over and over again (e.g. periodic update of item information, periodic import of meter readings).</p> <p>With version 4 of the EAM Datamanagement Tools you can create a Crontask which monitors a specific directory for new files to import. The Path of the directory  and theapplication in which the data should be imported are parameters for a  contask instance.</p> <p>The class file for the crontask is: de.eam.app.eamimport.EAMImportCron</p> <p></p> <p>Processing steps for the crontask:  </p> <ul> <li>The crontask automatically creates two subdirectories in the source directory: \"done\" and \"recovery\"  </li> <li>Excel Import files which are processed correctly are moved into the \"done\" subdirectory. The current timestamp (YYYYMMddHHmmss) is inserted into the filename. If you place the Excel import file \"Update_Desc.xlsx\" in the source directory and the file is imported without errors then the Excel file is moved to the \"done\" directory and renamed to \"Update_Desc_20151128204803.xlsx\".  </li> <li>Excel importfiles where an error occurred during import are moved to the \"recovery\" directory and also renamed with the current timestamp.  </li> <li>Along side the renamed Excel importfile the crontask will create a logfile. The name of the logfile is the name of the import file with the extension \".log\" appended. The logfile contains some general information, the import summary and possible error messages.  </li> <li>The directory which is defined by the crontask parameter SourceDir is periodically checked for new files to import. The crontask parameter Application contains the name of the target Maximo application where the Excel files will be imported to.</li> </ul> <p>The logfile of a successful import of \"Test 1.xlsx\" into the Asset application may look like this:</p> <p></p> <p>If an error occurs the error text will also be displayed in the logfile.</p>"},{"location":"UserGuide/Memory%20and%20Performance%20Issues/","title":"Memory and Performance Issues","text":"<p>maximex empowers users to export and import large amounts of data with a few clicks. This is quite a contrast to the usual usage pattern where a user works with the user interface and works with just a few records at a time. There are three aspects to consider when dealing with large amounts of data:  </p> <ul> <li>Memory consumption  </li> <li>Duration of the export or import (it can take up to a few hours to process or create large xls files)  </li> <li>Performance impact for other users on the system</li> </ul> <p>The older Microsoft Excel file format .xls, which can still be used with the importer, has a limit of 256 columns and 65k rows in one worksheet. On the other hand is the memory footprint quite low and there is not too much overhead in the binary file format. The new XLSX file format is quite different: The XLSX file itself is internally a compressed folder with a few XML files. To read and write data from the XLSX file it must be decompressed in memory. This uses a lot of RAM. Every cell in the XLSX file uses appr. 700 bytes of RAM! Keep this in mind when exporting large amounts of data!</p>"},{"location":"UserGuide/Memory%20and%20Performance%20Issues/#downloading-large-search-results","title":"Downloading large search results","text":"<p>Lets assume you have 100.000 Workorder records in the list view of the Work Order Tracking application and you want to export those in an Excel file. Lets assume further that your WORKORDER business object has 300 attributes. If you select the XLS Searchresult Download option, the resulting XLSX worksheet would have 30 million cells. With approximately 700 bytes per cell this gives 21 GB of required heap usage! (not included the memory Maximo needs for all those Mbo\u2019s it has to read from the database). The result would be very slow system for up to an hour, an Out of Memory Exception on the Application Server and some unhappy users and administrators!  </p> <p>Solutions to this problem are:  </p> <ul> <li>Do not download more than a few thousand records into one XLSX file.  </li> <li>Use the template feature and export only those attributes which are required and used.  </li> <li>The actual limits depend a lot on your environment, the available resources on your application server and your data (often a lot of the attributes are not filled  and therefore no cell in the XLS file is created).  </li> <li>The best way to test your limits is to start with a small number of records and monitor the resource consumption on your application servers.</li> </ul> <p>Downloading large amount of data with the searchresult download can have the following negative effects:  </p> <ul> <li>high CPU usage and high memory consumption on the application server when a lot of Mbo's are exported and a large Excel document must be generated.  </li> <li>A lot o f SQL Queries and corresponding resource consumption on the database server. This is especially true if you export a large number of Maximo objects together with related objects with the extended searchresult download.  </li> <li>A lot of network traffic between the database server and the application server.  </li> </ul> <p>Most of the time other Maximo users are also affected (Maximo is slow in responding to input, the browser seems to need a long time to retrieve and data and show the page, search and page navigation is slow).</p>"},{"location":"UserGuide/Memory%20and%20Performance%20Issues/#aborting-the-export","title":"Aborting the export","text":"<p>Since March 2017 there is a new System Property \u201eEAM.Importer.MinFreeHeapPct\" in Maximo which is created during the installation of maximex. The default value is 10 which means that during the export of data (download of search results in single, extended or specification mode and download into a template) the tool checks periodically that 10 percent of the Java heap memory remain free. If the free memory falls below the configured limit then:  </p> <ul> <li>The export is abortet. The excel file is sent back to the user with all the data which was exported up to this point. THE DATA IN THE EXCEL FILE IS INCOMPLETE!. There are rows or even whole worksheets missing!  </li> <li>The filename of the resulting excel file is prefixed with \"ABORTED_EXPORT_\". It is immediately obvious from the filename that the export was aborted.  </li> <li>The exported excel file contains an additional worksheet with the name \"ABORTED_EXPORT\" which is inserted in the first position in the workbook. This worksheet also contains the note that the export was aborted because the free memory fell below the configured limit.</li> </ul> <p>This feature avoids OutOfMemory Exceptions during the export of large data. There is no negative impact on the availability of Maximo.</p> <p>You can adjust the value of the system property from 0 (disable this feature) to 100 (every download is aborted). Due to caching Maximo uses a lot of the available memory during normal operation. It might not be useful to set the value for this system property to 20 or above.   </p> <p>It might also be useful to monitor the free memory on your production servers. If an export is aborted due to high memory usage then the administrator should verify if the memory is released after some time. It might also be useful to restart the application server in off hours to free up unused memory from Maximo. The behavior of caching Maximo objects in the servers main memory is a default feature of Maximo and can not be influenced by maximex.</p>"},{"location":"UserGuide/Memory%20and%20Performance%20Issues/#importing-large-amounts-of-data","title":"Importing large amounts of data","text":"<p>Lets assume you want to import 100.000 asset records into Maximo. Since the importer adds data to the imported Excel file and sends the file back to the client the same rules as above apply. Furthermore you should make sure that your session timeout is large enough so that the Maximo UI session does not time out during the import. If the session does time out the import summary dialog can not be displayed and the imported file can not be pushed back to the client. To check the import result you have to open the import history dialog. You can limit the maximum number of rows which can be imported in one XLS worksheet with a System Property. See chapter Configuration Options for the EAM Data Management Tools for more information.</p>"},{"location":"UserGuide/Periodic%20Export%20of%20Data%20with%20a%20Crontask/","title":"Periodic Export of Data with a Crontask","text":"<p>Data can not only be imported with a crontask but also exported. This is useful if Maximo data should be exported on a regular basis for external system or other stakeholders. The created Excel files can be stored in the file system of the application server. It is also possible to send the resulting Excel file direclty via email or do both at the same time.</p> <p>For every periodic export task a crontask instance must be created. You then configure the crontask instance wi th its crontask parameters.</p> <p>The class file for the crontask is: de.eam.app.eamexport.EAMExportCrontask Every crontask instance has the following parameters:</p> Parameter Name Default value Description Application Maximo application from which you want to eport data StoredQueryName Query name of the saved query  in the application which contains the selection  criteria for the data export Template EAM Datamangement Tools template which  should be used for the data export OutputDir D:\\EAMExportCron\\ Output directory. Generated Excel export files  are saved in this directory Email_to The email to field. Separate adresses with comma Email_from The Email from field Email_cc the email cc field. Separate addresses with comma Email_bcc the email bcc field. Separate adresses with comma. Email_Subject Maximo Export the email subject line Email_Body EAM Datamagement Tool  Export Crontask Output file the email body DEBUG 0 if active (value 1) then debug information is  written to the SystemOut.log file ofthe application server. <p>Processing steps for the crontask:  </p> <ul> <li>The crontask parameters Application and Template are required.  </li> <li>The parameter application contains the Maximo application name. Data will be exported from this application. The corresponding Maximo main object name is derived from the application.  </li> <li>The parameter Template defines which EAM Datamanaement Tools template should be used for the export. See chapter maximex Download Templates for more information on download templates. The value for the parameter can be the template name (e.g. assetlist.xlsx). Please make sure that there is a download template with the given name in the application. Warning: Templates can be renamed in the \"Manage Download Templates\" dialog and the given name in the crontask parameter can become invalid.  </li> <li>Instead of the template name you can also specify the unique ID of the record. This ID is also listed in the EAM Manage Download templates dialog and is labelled as importnumber.  </li> <li>The crontask parameter StoredQueryName is optional. If no value is given, then all records in the application are exported. If you specify a name then you have to make sure that there is a saved query with the given name in the application (see \"View/Manage Queries\" dialog in the application). Additionally, the user which runs the crontask (CRONTASKINSTANCE.RUNASUSERID) must be the owner of the saved query.  </li> <li>The parameter OutputDir defines where the generated Excel file is stored in the filesystem of the application server. Ensure that the directory exists and the Maximo application server can create files in this directory.  </li> <li>The file name of the stored Excel files is the name of the download template used. The current timestamp is inserted in front of the file extension. If your download templates name is \"assetlist.xlsx\" then the export file is saved as \"assetlist_20170320_171730.  </li> <li>If you do not want to store the generated Excel file but only send it via email, then leave the value for the parameter OutputDir empty. In this case the Excel file is created in a temporary Folder and is deleted again after it was attached to the email and the email is sent.  </li> <li>If the generated Excel file should be sent via email to some recipients you need to provide values for th e parameters Email_to and Email_from. Additionally the base Maximo configuration must be correct to be able to send emails.  </li> <li>The parameters Email_subject, Email_body, Email_cc and Email_bcc are optional.  </li> <li>For the parameters Email_to, Email_cc und Email_bcc y ou can provide a comma separated list of more than one email address.</li> </ul>"},{"location":"UserGuide/Pre-Import%20Check%20Script/","title":"Pre-Import Check Script","text":"<p>During the import the data is checked against the Maximo business rules. A new System Property allows the administrator to specify the name of an automation script which is then executed right before the data is processed. The automation script receives the excel file as a context parameter and has therefore access to the complete excel document. This automation script can be used to implement some additional custom checks on the imported data . Examples might be:</p> <ol> <li>Check to determine the data quality</li> <li>Checks for completeness of the data</li> <li>Checks for naming conventions</li> <li>Other custom checks which should only be done during import via the data manager and     are not part of the Maximo business logic.</li> </ol>"},{"location":"UserGuide/delete_records/","title":"Delete records with Excel Import files - $Delete","text":"<p>As you have seen in the previous chapters it is quite easy to import new data or update existing data by uploading Excel import files into Maximo. With version 4 it is also possible to delete records. How does this feature work:  </p> <ul> <li>Objects are deleted in Maximo if the Excel import file contains a column with the label $Delete and this column contains the value 1 (or Y; a value which represents true for a Maximo YORN value)  </li> <li>if the $Delete column is empty or contains some other data then the records will be created or updated.  </li> <li>Records can be deleted with a simple import or an extended import. If the extended import is used you can either delete the main object (the $Delete column is left of the separator column where the main object is) or you can delete child objects ( the $Delete column is right of the separator column). It is also possible to have the $Delete column on both  </li> <li>Records are deleted by the Maximo business logic. No direct SQL commands are executed in the Maximo database. The Maximo business logic also makes sure that child objects are deleted as needed.  </li> <li>You can mix inserts, updates and deletes within one worksheet.</li> </ul> <p>Sample import file (simple import into Currency application):</p> <p> Illustration 31: Simple import file with $Delete column </p> <p>Illustration 31 shows a simple excel import file with a $Delete column. If you import this file into the currency application in Maximo maximex tries to delete both of these currencies. If an existing object could not be deleted, you will either get an error message (with the Stop of Error Mode) like this</p> <p> Illustration 32: Error message when deleting a currency code which is used in other tables</p> <p>or the $ImportError column in the Continue on Error Mode is populated with the error message.</p>"},{"location":"UserGuide/extended_import/","title":"Extended Import","text":"<p>The Extended Import or 1:n Import allows you to:</p> <ul> <li>Insert new Maximo objects together with related child objects like ASSETS with SPAREPARTS or JOBPLAN with JOBTASK or PO with POLINE objects  </li> <li>Add or update child object data for existing parent objects  </li> </ul> <p>In Maximo (or rather in the Tivoli Process Automation Engine) you can define relationships between Maximo objects. Not all relations can be used with the importer. To import new child objects with the extended import only \"real dependent\" objects can be created. \"Real dependent\" objects are those which always require a higher level object to be meaningful (e.g. a POLINE makes only sense with a related PO object).</p>"},{"location":"UserGuide/extended_import/#create-an-excel-import-file","title":"Create an Excel import file","text":"<p>The Extended Import is also, like the Specification Import, an extension to the Simple Import mode of the EAM Importer and shares some key concepts with the Simple Import mode. However, the following conditions apply for the Excel File contents:  </p> <ul> <li>Only 1:n relations are allowed. Relations like 1:n:m like INVOICE INVOICELINE INVOICECOST are not supported. </li> <li>A XLS Import file for the Extended Import can contain more than one worksheets with data.  </li> <li>A worksheet in the Excel file contains the data for one relation from the parent object to the child object.  </li> <li>The name of the worksheet for the Extended Import starts with \"Extended_\" and is followed by the relation name. Worksheet names in XLS are limited to 31 characters. For long relationship names the template generator and search result download will only use the first 31 characters of the resulting worksheet name.  </li> <li>After the last column of the main/parent object attributes a separation column is inserted. The template generator and search result download with extended data insert the separation column with a red background.  </li> <li>The second row of the separator column contains the name of the relation surrounded with \"!\", e.g. !SPAREPART!.  </li> <li>On the right hand side of the separation column are the attributes of the child object. Required fields, unique ID Column, key column,... have a background color according to the colorlegende (see Simple Import above for a description)</li> <li>For one record of th e main/parent object (left of the separator column) there are 0...n entries on the related object side (right of the separator column). The first child record is always on the same row as the main object data.  </li> <li>The import is processed row by row and the obj ect is saved every time a \"new\" main object is encountered.</li> </ul> <p>Writing a XLS import file for the extended import from scratch is a time consuming and error-prone task and should be avoided. It is recommended to start with a generated template or a downloaded search result with extended data or to start with a demo XLS file. The following screenshot shows a simple worksheet for the extended import. The first ASSET EAM_e01 has two SPAREPART children. The basic layout is the same as for the simple import (row 1 : attribute title, row 2: attribute name, row 3: sample data row, row 4: first data row to import. See the format description above)</p> <p> Illustration 27: Worksheet for extended import with child object</p>"},{"location":"UserGuide/extended_import/#download-a-template-for-the-extended-import","title":"Download a Template for the extended import","text":"<p>To download an empty XLS template for the extended import select the action menu item \"EAM Data Management Tool\" \u2192 \"EAM generate extended XLS Template\" in the list view of an application.</p> <p> Illustration 28: Select Action menu entry EAM generate extended XLS template</p> <p>This command opens a dialog box where you can select the relation to the child object. For every selected relation a separate worksheet is created in the XLS template file.</p> <p> Illustation 29: Dialog: create extended XLS Template</p> <p>The lookup lets you select the available and allowed relations for the main object of the current application.</p> <p>NOTICE: The administrator can and should limit the available relations in this lookup to those which are needed and are useful for the application! This task can be accomplished with the \"EAM Enter allowed Fields for the Update Tool\". See chapter \"EAM Fieldupdater - Select allowed relations and attributes\" for detailed instructions. After selecting the relations click OK. The generated template is sent to the client and the user is prompted to save or open the XLS file (this may vary on your client and depends on the client configuration).</p> <p>Lets assume you have selected the Relation SPAREPART in the above dialog in the ASSET application. The generated XLS template would then contain three worksheets:</p> <ul> <li>\"Extended_SPAREPART\" is the worksheets for the extended import  </li> <li>\"DataDictionary\" contains the Data dictionary for the main object  </li> <li>\"Colorlegende\" contains a description of the used colors in the worksheets and their meaning. (See the simple import above for a detailed description)</li> </ul>"},{"location":"UserGuide/extended_import/#download-a-search-result-with-extended-data","title":"Download a search result with extended data","text":"<p>If you want to add or update related child data to existing parent objects it is very useful to download the existing data as a XLS file suitable for the extended import. Follow these steps to download a search result with extended data:</p> <ol> <li>Use the Filter or the advanced search to limit the objects in the list view to those    parent objects you want to include in the XLS file</li> <li>Select \"EAM XLS Extended searchresult download\" from the action menu</li> <li>The dialog \"Create XLS Download inclusive Child Data Sets 1:n\" opens </li> <li>In the Dialog select the relation(s) to the child data which shall be included in the    extended search result download. For every selected relation a separate worksheet    is created in the XLS file.</li> <li>Optional: Check the checkbox if you want to save the attributes of the main object in every row. This is only useful if you want to process the result outside of maximo    or you want to make some pivot tables. Usually you do NOT want to check this    checkbox!  </li> <li>Click OK. The generated search result with the selected child object data is sent to    the client.</li> </ol> <p>Every worksheet in the downloaded search result contains all records from the search    result and the corresponding child record s which are fetched through the specified    relation.    Before you can use the template be sure to:  </p> <ul> <li>Remove any columns you do not want to set during the import on the parent object    side as well as on the child object side  </li> <li>Keep the unique ID columns in the template (these attributes have a light green    background). For new data leave the unique ID fields empty because the importer    then will insert the unique ID values for the newly created Maximo parent and child    objects in the corresponding columns.</li> </ul>"},{"location":"UserGuide/extended_import/#execute-the-import","title":"Execute the Import","text":""},{"location":"UserGuide/extended_import/#cls-file-upload","title":"CLS File Upload","text":"<p>The import or update of specification data is started from the action menu in the list view of the application. Select \"EAM Data Importer\" from the action menu in the list view of the application. See Illustration 15: Select Action menu Item EAM Data Importer for a screenshot.</p>"},{"location":"UserGuide/extended_import/#processing-steps-for-the-extended-import","title":"Processing Steps for the Extended Import","text":"<p>The Excel file will be analyzed. The following checks are performed:  </p> <ul> <li>Is the uploaded file a Excel document  </li> <li>Are there any worksheets were the name starts with \"Extended_\"  </li> <li>Are there attribute names in the second row of the worksheets    </li> <li>Are the attribute names on the worksheet for the parent object and for the child object unique  </li> <li>Are data rows in the worksheet available  </li> <li>Is there a separation column between the attributes of the parent object and the child object  </li> <li>Is the relation name parsed from the worksheet name valid  </li> <li>Is there a valid child object for the given relation  </li> </ul> <p>In case of an error a error message is displayed to the user and the import of this worksheet is canceled.</p> <ul> <li>Analyzing the target object (the current application object; the parent object)  </li> <li>Check if the target object is valid. The name is automatically determined based on the Maximo application from where the import is started.  </li> <li>Determine the object type. Is it a System Object (e.g. PERSON), SITE Object (e.g. LOCATION, ASSET,...) or a ORG Object (e.g.. LABOR, CRAFT,...).  </li> <li>Determine the unique ID attribute name. This is unique for every object and assigned internally from Maximo. For example ASSETUID for Asset Objects or LABORID for Labor objects.  </li> <li>Determine the key attribute(s) of the object.  </li> <li>Check if all required attributes are available in the Excel document.  </li> </ul> <p>In case of an error a error message is displayed to the user and the import is canceled.</p> <ul> <li>Analyzing the child object:   </li> <li>Check if child object is valid.  </li> <li>Determine the child object type. Is it a System Object (e.g. PERSON), SITE Object (e.g. LOCATION, ASSET,...) or a ORG Object (e.g.. LABOR, CRAFT,...).  </li> <li>Determine the unique ID attribute name of the child object. This is unique for every object and assigned internally from Maximo. For example ASSETUID for Asset Objects or LABORID for Labor objects.  </li> <li>Determine the key attribute(s) of the child object.    </li> <li>For every parent object row (remember: starting from row four in the Excel file) do the following:  </li> <li>Based on the information (available attributes in the excel document, known properties of the object type like key attributes, unique attributes, object type and the available data in Maximo) decide if we update existing parent object data or insert a new parent object.  </li> <li>$Delete column available and contains 1 (or Y or something which evaluates to True for a Maximo YORN field) Do not create the object or delete it if it is already available.  </li> <li>Prior to creating a new parent object the default insert SiteID, default insert Org ID, default ItemSet and default CompSet are set on the MBO Set (depending on the object type)</li> <li>For a new parent object the key attributes are set first.  </li> <li>Set other attributes of the parent object in the same order as they appear in the Excel document.  </li> <li>Retrieve the child set via the given relation. First the relation name derived from the worksheet name is used. If no valid relation can be found (the worksheet name might be incomplete because only 31 characters are allowed for XLS worksheet names) then the relation name from the separator column is used. If the parent object is a new object and we already have child data available, then we stop the import with an error message because the relation is not a \"real\" 1:n relation.  </li> <li>Determine the number of child obje cts for the current parent object in the XLS file  </li> <li>For every child object in the XLS file do the following:  </li> <li>Search for the child object in the child dataset (with unique ID, with key columns of the child object, with key columns from the child and values borrowed from the parent).  </li> <li>Check if there is a $Delete column for the child object and if the column contains a Maximo YORN true value (1 or Y). If so then do not create the child object or delete it if it is already there. </li> <li>If a child record is found, then upd ate the attributes of this child object  </li> <li>If no child record is found, then add a new child record to the child set and set the given child attribute values.  </li> <li>Save the parent object set  </li> </ul> <p>If there is an error (either during setting of attributes or during saving) the behavior depends on the processing mode. If no column $IMPORTERROR is available in your worksheet (processing mode \"Stop on Error\") an error message is displayed to the user and the import is aborted. Every error message during import contains the line number of the Excel file and the attribute name which causes the problem. If a column $IMPORTERROR is available (processing mode \"Continue on Error\") the error message is not displayed to the user but written to the $IMPORTERROR column of the corresponding row. Also, the problematic attribute is highlighted with a red background and the import is not aborted but continues with the next row.</p> <p>NOTICE:</p> <ul> <li>As against the Simple Import no columns can be added to the XLS worksheets for the extended import on the parent data (the XLS handling library does not allow to insert columns in the middle of the worksheet in front of the separation column)  </li> <li>If an attribute in the Excel document in the left of the separation column is empty (no value in the Excel cell) then t he attribute is set to NULL. It is therefore important to remove all columns from the excel document which should or can not set to null or fill all columns with the appropriate values  </li> <li>Object attributes are only set if the new value from the Excel document is different from the current value in the MBO!  </li> <li>The unique ID column for the child data is added to the worksheet, if it is not already available. For new child objects the unique ID of this object is saved in the XLS file.  </li> <li>If the unique ID columns are available on the parent object, then they are filled with the generated unique ID for the object.</li> </ul>"},{"location":"UserGuide/extended_import/#after-the-import","title":"After the Import","text":"<p>The steps after processing of the uploaded XLS file (display import summary dialog, download of the processed XLS file to the client, update list view of the application) are identical to the Simple Import and are not repeated here.</p>"},{"location":"UserGuide/extended_import/#multilevel-import","title":"Multilevel Import","text":"<p>The Multilevel import is a extension to the extended import. The extended import as described above can import 1:n Relations. With multilevel imp ort this concept is now extended to more than 2 levels For the majority of data in Maximo the Extended Import is sufficient. However, there are some Maximo applications where simple parent child relations are not enough and 1:n:m is required. These are:  </p> <ul> <li>Security Groups - applications - options  </li> <li>Problem - cause - remedy  </li> </ul> <p>Multilevel searchresult download and multilevel template generation are not supported. You have to manually create the excel importfiles for multilevel import. The layout of the multilevel import file is similar to the extended import with some additional requirements. The following chapters explain the content and layout of the importfile with an example.</p>"},{"location":"UserGuide/extended_import/#security-groups-applications-options","title":"Security Groups - Applications - Options","text":"<p>Multilevel import allows the activation and deactivation of sigoptions in applications for specific security groups. The importfile has 3 levels:</p> <ol> <li>Security Group (MAXGROUP)</li> <li>Application (MAXAPPS)</li> <li>Options (SIGOPTION)</li> </ol> <p>A screenshot of the excel import file is shown in Illustration 30: Multilevel Import File    for Security Groups Applications Options. The content of the import file    is similar to the extended import.    When creating a import file for the multilevel import make sure that:  </p> <ul> <li>the different levels are separated with a separation column  </li> <li>the first row in the separation column contains the names of the two objects    separated with a dot. In the example below the first separation column    contains MAXGROUP.MAXAPPS. This means that right of the separation    column (the child side) where is a MAXAPPS entry and the higher level object    is MAXGROUP.  </li> <li>The second row in the separ ation column contains the relation name for the    two objects in row 1. The sample below uses the relationship MAXAPPS    between the objects MAXGROUP and MAXAPPS and the relationship    SIGOOTHER between MAXAPPS and SIGOPTION.  </li> </ul> <p></p> <p>The above import file enables the some of the SIGOPTIONS for the EAM Data Management Tool in the Action application for the security group MAXADMIN.</p>"},{"location":"UserGuide/extended_import/#failure-class-problem-cause-remedy","title":"Failure Class - Problem - Cause - Remedy","text":"<p>Another practical example for a multilevel import is the Maximo application Failure Codes. In this application we have four Levels, which are imported during a single import.  The hierarchical structure is as follows:</p> <ol> <li>one failure class can contain any number of problems</li> <li>one problem can have any number of causes</li> <li>one cause can have any number of remedies</li> </ol> <p>You can download a sample import file for problem    cause remedy from the EAM    Software sample library.</p>"},{"location":"UserGuide/general/","title":"General","text":"<p>The EAM Importer for IBM Maximo processes data which is available in the Excel File format (XLS files from Excel 95, 97, 2000, XP and 2003). Since version 2 the EAM Data Management Tool can also process the new XLSX file format which is used from Excel 2007 onwards. As a precondition to use the mentioned tools you need access to the corresponding menu entries. Access can be granted in the Security Groups application which can be opened from the Go To menu (see Illustration 4: Open the Security Groups Application)</p> <p> Illustration 4: Open the Security Groups Application</p> <p>The Maximo administrator can then enable or disable the individual signature options for the selected Maximo application. The following Illustration 5: EAM Signature Options in Security Gr oup application shows the Security Group Application (in SCCD with tivoli13 skin). All the EAM Signature Options are enabled for the Locations application.</p> <p> Illustration 5: EAM Signature Options in Security Group application</p> <p>The Importer has three operational modes:   </p> <ul> <li>The Simple Import (see chapter maximex Simple Import)  </li> <li>The Specification Import (see chapter maximex Specification Import)  </li> <li>The Extended Import or 1:n Import (see chapter maximex Extended Import)  </li> </ul> <p>The Simple Import allows you to import or update \"flat\" data in Maximo. With the simple import you cannot add or modify specification attributes or child objects. You may know this functionality from previous versions of this product.</p> <p>The Specification Import enables you to import or update Maximo objects with specification attributes like assets, locations or tickets. Specification data is imported together with the main object from one data source.</p> <p>The Extended Import allows you to import or update Maximo objects together with corresponding data in child data sets like ASSET with SPAREPARTS or JOBPLAN's with their corresponding JOBTASK data.</p> <p>All import modes share common concepts. For every import mode you can:  </p> <ul> <li>Download an empty Microsoft Excel Template  </li> <li>Choose \"EAM Template Generator\" to download an importer template for the  Simple Importer (without specification attributes or related child data)  </li> <li>Choose \"EAM Template for Spec Data\" to download an importer template with specification data  </li> <li>Choose \"EAM Generate extended XLS Template\" to download an importer template with related child data. </li> <li>Download the current records in the application list view (the current search result) as a Microsoft Excel file.  </li> <li>Choose \"EAM XLS Searc hresult Download\" to download the current search result of the application without specification data or related child data  </li> <li>Choose \"EAM XLS Searchresult with Spec Data\" to download the current search result of the application with its  specification data at tributes  </li> <li>Choose \"EAM XLS Extended Searchresult Download\" to download the current search result with child data.  </li> <li>Import new or modified data into Maximo. This is accomplished with the menu entry \"EAM Data Importer\".  The software automatically detects the im port mode to use.  </li> </ul> <p>maximex is not a Maximo application. Instead it is a set of \"Select Action\" menu entries which can be installed and enabled in (almost) any Maximo application where you want to have the tools available. The action menu of an IBM Maximo application can contain the following menu items (depending on the application, the license, the installation or the security setting only some of these menu items may be available to users):</p> <p> Illustration 6: Import modes and corresponding menu entries</p> <p>If you are using IBM Smart Cloud Control Desk 7.5 or Maximo Asset Management 7.5.0.2 with enabled side bar maximex components are also available in the sidebar of your Maximo application (see Illustration 8: Sidebar Menu in SCCD 7.5.1).</p> <p>Some often used features of maximex are also available in thesearch bar. The data import is the default action when you click on the search bar entry, other options can be selected from the drop down list of the entry.</p> <p> Illustration 7:maximex Searchbar Menu</p> <p> Illustration 8: Side Bar Menu in SCCD 7.5.1</p> <p>The following chapters describe each import mode in detail.</p>"},{"location":"UserGuide/general/#importer-processing-modes","title":"Importer Processing Modes","text":"<p>The EAM Data Importer has two processing modes:</p> <p>Stop on Error Mode: This is the default mode and is available since the first version of maximex. In this mode the import stops after the first error. A detailed error message is displayed to the user (usually with the line number where the error occurred).</p> <p>Continue on Error Mode: If an error occurs in a line in the Excel file the error message is not displayed to the user. Instead the error message is written in the column $IMPORTERROR in the Excel import file. Furthermore the import is not stopped, but continues with the next line in the Excel file. After the import the user can filter the column $IMPORTERROR and find those objects where an error occurred. If the error can be traced to a specific attribute, then this attribute is marked with a red background color. This mode is very useful if the data quality of your input data is not perfect and errors might occur. (An example might be that you want to import new assets with their location but corresponding location entries might not be available).</p> <p>To enable the Continue on Error mode you simply create a column with the name $IMPORTERROR (the leading $ sign is important! This distinguishes the column from regular attributes). The position of this column does not matter. The column $IMPORTERROR could be the first column, the last column or anywhere in The column n ame is case insensitive. $IMPORTERROR or $ImportError are both valid. The following example illustrates the behavior of the Continue on Error Mode:</p> <p> Illustration 9: Excel workshett with $IMPORTERROR column</p> <p>Above illustration shows an Excel import file for updating some assets. This sheet also contains a column $IMPORTERROR. When importing this file the importer recognizes the $IMPORTERROR column and switches to the Continue On Error Mode. After the import the following summary dialog is displayed to the user:</p> <p> Illustration 10: Import Summary Dialog for Continue on Error Simple Import</p> <p>The import summary for this file shows that 4 records where modified and (an additional) 4 records had an error. The final Import file which is pushed back to the client is shown in Illustration 11: final XLS file with errormessages in $IMPORTERROR column. The line height is adjusted because the errormessages in $IMPORTERROR usually have 2 lines.</p> <p> Illustration 11: final XLS file with errormessages in $IMPORTERROR column</p> <p>It is easy to see the problematic rows. The user can now correct the errors and reimport the Excel document. It is not required to clear the $IMPORTERROR column. This is done by the importer internally.</p> <p>If an extended Import is processed (objects with dependent objects like ASSET with SPAREPARTS) the counter for \"Records with erros\" im the import summary can contain main objects or child objects. If an error is encountered during import of a child object then the error counter is also increased. In contrast to that are the counter for \"New records\" or \"Modified records\" only increased for every main object and not for child objects.</p>"},{"location":"UserGuide/multilanguage_import/","title":"Multilanguage Import","text":"<p>Some objects in Maximo support multilanguage attributes ( e. g., item description). A normal import with the data manager only sets the value for the current user session language selected during login (or specified in the user profile). The multilanguage import feature allows you to specify the attribute value not only for the current language of your user session, but for several configured languages in one import file. Note: You can only execute a multilanguage import if you are connected in the base language of your Maximo installation. You will get a descriptive error message if you are connected with the wrong language.  </p> <p>To import a multilanguage enabled attribute for several languages simple prepend the attribute name in excel row 2 with the language code in curly braces or parentheses.</p> <p></p> <p>The example above contains a import for some items. The description is specified for English in the column \"{EN}DESCRIPTION\" and German in the column \"{DE}DESCRIPTION\". The language code is not case sensitive and can also be specified in lowercase. Multilanguage attributes without a language code prefix are assumed to be in the language of the current user session.</p> <p>You can also specify attributes with language prefix in your download template</p>"},{"location":"UserGuide/simple_import/","title":"Simple Import","text":"<p>The Simple Import allows the import and update of flat data in IBM Maximo and can be used in all Maximo applications. It is not possible to import specification attributes (see chapter maximex Specification Import for more information on that topic). The simple import can not import or update related objects. If you need this feature than use the extended import which is described in chapter maximex Extended Import</p>"},{"location":"UserGuide/simple_import/#create-excel-import-file","title":"Create Excel Import file","text":"<p>The data for the import or update must be available in Microsoft Excel file format. There are four ways to create the needed file:</p> <ol> <li>Manual creation of the Excel file according to the specification</li> <li>Download of an empty Excel template for the current IBM Maximo application and complete the data.</li> <li>Download of search results for the current IBM Maximo application</li> <li>Downloa d of a search result with a download template</li> </ol> <p>NOTICE:  Independent of the method used to create the Excel file you should note the following:</p> <ol> <li>An Excel file should only contain columns which either have data or should be set to null. Therefore a downloaded template or search result should be reduced to the needed columns. The other columns must be deleted!</li> <li>The order of the columns in the Excel file is important. Check the correct order with a sample record and reorder the columns if necessary. The importer processes the columns from left to right.</li> </ol>"},{"location":"UserGuide/simple_import/#manual-creation-of-the-xls-file","title":"Manual Creation of the XLS File","text":"<p>The EAM Importer for IBM Maximo expects the data in a specific form. The following conditions must be met:</p> <ul> <li>There must be one worksheet with the name \"Simple\". This worksheet contains the data which is imported or updated.</li> <li>The first row of the worksheet contains the title of the attributes. For the manual creation of the Excel file this row can be left empty since the importer does not evaluate it.</li> <li>The second row contains the attribute names.</li> <li>The third row is designated for an example record and can be left empty.</li> <li>All further rows starting (and including) from row number four are considered as data rows and are evaluated by the importer. IMPORT starts at row four!</li> <li>The available attributes in the excel file are read from the file from left to right. The attributes for the MBO (Maximo Business Object) are set in the same order as they are read from the excel file.</li> </ul> <p>NOTICE:  The attributes on the MBOs are set in the same order in which they appear in the Excel file. An exception to this are attributes which are part of the primary key of the Maximo object in question. Key attributes are always set first. The attributes are set with the usual methods of the MBOs and the inherent business logic is executed. The order of the attributes in the excel document is therefore sometimes important. Example: the attribute PARENT on a location object can only be set to a value if the SYSTEMID is already filled in. If you are not sure about the correct order of the attributes then make a test with one sample record. If unsure check also the order in the User Interface.</p>"},{"location":"UserGuide/simple_import/#download-a-xls-template","title":"Download a XLS Template","text":"<p>An empty XLS template for the current Maximo application can be downloaded via the action menu \"EAM Data Management  Tool\" -&gt; \"EAM Template Generator\"</p> <p> Illustration 12: Select Action menu option to download an empty XLS template</p> <p>The created template fulfills the same conventions which are required for the manual creation of the Excel file:  </p> <ul> <li>The attribute names have a background color. The following screenshot shows an empty template for the PERSON application.</li> </ul> <p> Illustration 13: Screenshot of an empty Template in PERSON application</p> <p>The background colors have the following meaning:</p> <ul> <li>orange: The attribute is (part of) the primary key</li> <li>blue: The attribute is required in the database (other attributes may  also be required by the business logic of the object).</li> <li>light green: The attribute is the unique key of the object.</li> <li>light gray: The attribute is non persistent.</li> <li>White:The attribute is a \"normal\" persistent attribute of the object.</li> <li>Lavender: A cell is set by the import to this color if the cell in the XLS file is empty, but the corresponding attribute on the Mbo has a value  and is re ad only (used by the Extended Import)</li> <li>red: Used for the separation column to separate the columns of the  main object from the specification attributes (for the  specification import) or from the attributes of the child object  (for the Extended Import).</li> </ul> Color Meaning orange The attribute is (part of) the primary key blue The attribute is required in the data base (other attributes may also be required by the business logic of the object) light green The attribute is the uniquw key of the object light grey The attribute is non-persistent white The attribute is a \"normal\" persistent attribute of the object lavender A cell is  set by the import to this color if the cell is the XLS file is empty, the the corresponding attribute on the Mbo has a value and is read-only (used by the extended import) red Used for the seperation column to seperate the colums of the main object from the specification attributes (for the specifitcation Import) or from the attributes of the child object (for the extended import) <p>For templates and search results with specification attributes the following additional colors apply:</p> Color Meaning light green specification attribute with data type ALN blue specification attribute attribute with data type NUMERIC lime Specification attribute with data type TABLE (only available in Maximo 6 and later) <ul> <li>The created Excel template also contains a second worksheet which contains the data dictionary with detailed information for every attribute (default value, data type, field length,...)</li> <li>A third worksheet contains above color legend</li> </ul> <p>NOTICE: A red background and white font in the attribute cells of download search results is used if the value of the attribute could not be retrieved due to Maximo configuration errors (missing relations) or internal errors (like data base errors)</p> <p>NOTICE: The following attributes are not included in the template because they are always updates via the business logic of  the objects: - CHANGEBY, CHANGEDATE - ENTERBY, ENTERDATE - HASPARENT, HASCHILDREN - HASLD - LANGCODE</p>"},{"location":"UserGuide/simple_import/#download-a-search-result-as-an-excel-template","title":"Download a Search Result as an Excel Template","text":"<p>If you want to update existing data in an IBM Maximo application then you can download an Excel file with the existing data. First specify your search criteria in the list view of the application and select \"EAM Data Management Tool\" \u2192 \"EAM Searchresult Download\" from the action menu.</p> <p> Illustration 14: Select Action menu option for seach result download</p> <p>The downloaded file contains all information from the empty Excel Template plus the data from the current search result.</p> <p>The generated Excel file contains almost all attributes of the un derlying main Maximo Object. If you need to export a large amount of objects you should consider the new Download Template functionality (see chapter Memory and Performance Issues  for more information on performance and chapter EAM Data Management Tool Download Templates for more information on download templates).</p>"},{"location":"UserGuide/simple_import/#execute-the-import","title":"Execute the Import","text":""},{"location":"UserGuide/simple_import/#xls-file-upload","title":"XLS File Upload","text":"<p>To start the import of data select \"EAM Data Management Tool\" -&gt; \"EAM Data Manager Importer\" from the Select Action menu from the list view of your Maximo application.</p> <p> Illustration 15: Select Action menu Item EAM Data Importer</p> <p>The following dialog is opened:</p> <p> Illustration 16: Import Data dialog box</p> <p>Select the file and press the \"Import Data\" button. The file is sent to the Maximo Server and will be processed.</p>"},{"location":"UserGuide/simple_import/#processing-steps-features","title":"Processing Steps - Features","text":"<p>The Excel file will be analyzed. The following checks are performed:</p> <ul> <li>Is the uploaded file an Excel document?  </li> <li>Is there a worksheet with the name \"Simple\"?  </li> <li>Are there attribute names in the second row of the worksheet \"Simple\"?  </li> <li>Are the attribute names unique?  </li> <li>Are data rows available?  </li> </ul> <p>In case of an error, an error message is display to the user and the import is stopped.</p> <ul> <li>Analyze of the target object (the current application object)  </li> <li>Check if the target object is valid. The name is automatically determined based on the Maximo application from where the import is started.  </li> <li>Determine the object type. Is it a System Object (e.g. PERSON), SITE Object (e.g. LOCATION, ASSET,...) or a ORG Object (e.g. LABOR, CRAFT,...)?  </li> <li>Determine the unique ID attribute name. This is unique for every object and assigned internally from Maximo. For example ASSETUID for Asset Objects or LABORID for Labor objects.  </li> <li>Determine the key attribute(s) of the object.  </li> <li>Check if all required attributes are available in the Excel document.  </li> <li>In case of an error, an error message is displayed to the user and the import is canceled.  </li> <li>For every data row (remember: starting from row four in the Excel file) do the following:  </li> <li>Based on the information (available attributes in the excel document, known properties of the object type like key attributes, unique attributes, object type and the available data in Maximo) decide if we update existing data or insert new data.  </li> <li>Now we check, if there is a column with the label $Delete is available for the object and the contents of this column is 1 (or Y). If the delete flag is set for the current record then the record is not inserted into Maximo (if it is not already available) or the record in Maximo is deleted (if available). For a Maximo object which is deleted all other attributes available in the import file are ignored. See chapter Delete records with Excel Import files $Delete     </li> <li>Prior to creating a new object the default insert SiteID, default insert OrgID, default ItemSet and default CompSet are set on the MBO Set (depending on the object type)  </li> <li>For a new object the key attributes are set first.  </li> <li>Set other attributes in the same order as they appear in the Excel document.  </li> <li>Save the object  </li> <li>If there is an error (either during setting of attributes or during saving) the following behavior depends on the processing mode \"Stop on Error\" or \"Continue on Error\" (see Importer Processing Modes)  </li> <li>If \"Stop on Error\" is used (no $IMPORTERROR column) then an error message is displayed to the user and the import is aborted. Every error message during import contains the line number of the Excel file and the attribute name which causes the problem.</li> </ul> <p> Illustration 17: Error message during import dialog box</p> <ul> <li>If \"Continue on Error\" is used (a column $IMPORTERROR is available in the worksheet) the error message is not displayed to the user but written in the column $IMPORTERROR of the corresponding row. The import continues with the next  </li> <li>Data rows from the Excel document which would modify an existing Maximo Object which is read only are skipped (e.g. already saved LABTRANS records)</li> </ul> <p>NOTICE:</p> <ul> <li>If the attribute SITEID is missing in the Excel document but is required for the object the default insert site for the current user will be used for the import. Furthermore, a column with the SITEID is added to the Excel document.  </li> <li>If an attribute in the Excel document is empty (no value in the Excel cell) then the attribute is set to NULL. It is therefore important to remove all columns from the excel document which should or cannot set to null or fill all columns with the appropriate values  </li> <li>Attributes are only set if the new value from the Excel document is different from the current value in the MBO!  </li> <li>If the unique ID attribute is missing or empty on the Excel document then this information is added to the Excel file. </li> </ul>"},{"location":"UserGuide/simple_import/#after-the-import","title":"After the Import","text":"<ol> <li>A dialog with the Import summary is shown to the user</li> <li>the uploaded Excel file (with added information like unique ID values or selected SITEID) is sent back to the user</li> <li>The list view of the current Maximo application shows the records which were inserted or modified during the  last data import.</li> </ol>"},{"location":"UserGuide/simple_import/#data-import-summary","title":"Data Import Summary","text":"<p>After a succesful importa import summary message is displayed for the user.</p> <p> Illustration 18: Data import summary dialog</p> <p>This summary includes the following information:  </p> <ul> <li>Number of newly created records / objects.  </li> <li>Number of modified objects. Objects are counted even if no attribute values were modified because the attribute values in the Excel document were identical to the existing values.  </li> <li>Number of skipped objects (objects which are read only and could not be modified)  </li> <li>Number of deleted main objects. A deleted object is only counted, if it was available in Maximo a nd has to be deleted. If the object was not in available in Maximo in the first place it is not counted.  </li> <li>Number of deleted child objects. Again here: Only existing object which where actually deleted are counted. Also: Child objects are only then counted i f they are deleted individually. Child objects are not counted if you delete a main object and child objects are deleted implicitly by the business logic.  </li> <li>Number of records with errors.</li> </ul>"},{"location":"UserGuide/simple_import/#download-of-the-imported-data-as-excel-document","title":"Download of the imported Data as Excel Document","text":"<p>Depending on the available data in the XLS file values may be added to the XLS document (unique ID values or the default insert SITEID for the current user). The resulting Excel Document is downloaded to the client.</p> <p>This feature is important if there is an error during the import.</p> <p>Example: You want to import 20 new ASSET records and there is an error in line 10. The import is aborted, an import summary is displayed and the Excel file is sent back to the client. The first records which where correctly imported contain a value in the unique ID attribute ASSETUID. If you correct the error in line 10 and reimport the Excel document then the first 9 ASSET records will be identified by the known ASSETUID and therefore will not be inserted twice! The following rows (10, 11, 12, \u2026) in the Excel document will be inserted as new ASSET objects. In case of an error it is therefore important to continue with the downloaded Excel document to avoid duplicate records.</p>"},{"location":"UserGuide/simple_import/#update-of-the-list-view","title":"Update of the List View","text":"<p>After you close the import summary dialog the list view of the current Maximo application shows the currently inserted and modified records. Internally a where clause is created with all the unique ID values of the affected Maximo objects. This update of the list view only happens if not more than 500 records are affected or inserted. Otherwise, the created SQL query would get too long and a database error might occur.</p>"},{"location":"UserGuide/simple_import/#handling-of-maximo-and-excel-datatypes","title":"Handling of Maximo and Excel Datatypes","text":""},{"location":"UserGuide/simple_import/#import-of-data-from-excel","title":"Import of Data from Excel","text":"<p>Attributes of Maximo Objects can have various datatypes. Depending on the datatype of the attribute and the formatting of the Excel cell the processing differs. The processing is done in the following order:</p> <ol> <li>If the Maximo attribute is of datatype \u201eUPPER\", \u201eLOWER\", \u201eALN\", \u201eLONGALN\",    \u201eCLOB\", \u201eYORN\" or \u201eGL\" the content of the Excel cell is interpreted as string and the    object attribute value is set as string.</li> <li>If the Excel cell is formatted as date then the Maximo object at tribute is set as date.</li> <li>If the Excel cell is formatted as Number or Currency, then the Maximo object       attribute is set as double value.</li> <li>All remaining attributes are read as string from the Excel Cell and set as string value    on the Maximo object.</li> </ol>"},{"location":"UserGuide/simple_import/#export-of-data-in-excel","title":"Export of Data in Excel","text":"<p>When downloading a search result as Excel document then the Excel cells have the following data format:</p> <ol> <li>Maximo attributes with the datatypes \u201eUPPER\", \u201eLOWER\", \u201eALN\", \u201eLONGALN\",    \u201eCLOB\", \u201eYORN\" and \u201eGL\" will be exported as strings.</li> <li>Maximo attributes with the datatypes \u201eAMOUNT\", \u201eDECIMAL\", \u201eDURATION\",    \u201eFLOAT\", \u201eINTEGER\", \"BIGINT\" and \u201eSMALLINT\" will be written as float values in the    Excel cells.</li> <li>Maximo attributes with the datatypes \u201eDATE\" and \u201eDATETIME\" will be written as    Date values. The cell format is \u201edd.MM.yyyy\" for DATE and \u201edd.MM.yyyy hh:mm:ss\" for    DATETIME</li> <li>Maximo attributes with the datatype \"TIME\" are formatted as Excel date format with    the formatting \u201ehh:mm:ss\".</li> </ol> <p>NOTICE: Maximo attributes with the datatypes \u201eBLOB\", \u201eCRYPTO\" and \u201eCRYPTOX\" are not exported! The following attributes are not included in the template because they are always updates via the business logic of the objects:  </p> <ul> <li>CHANGEBY, CHANGEDATE </li> <li>ENTERBY, ENTERDATE  </li> <li>HASPARENT, HASCHILDREN  </li> <li>HASLD  </li> <li>LANGCODE  </li> </ul> <p>Important: : A cell in an Excel worksheet can hold a string with a maximum length of up to 32767 characters. If the content is longer it is automatically (and silently) truncated to this maximum length. If you have long description fields which are longer then the content of the excel cell is incomplete!</p>"},{"location":"UserGuide/simple_import/#handling-of-autokey-objects","title":"Handling of AUTOKEY Objects","text":"<p>The import of AUTOKEY Objects is a special case. Maximo assigns the primary key or a part of the primary key itself. One example in standard Maximo which uses autokeys is the Preventive Maintenance application. The PMNUM is the autokey column. If you do not specify a value for the PMNUM then Maximo automatically determines the next value for the PMNUM field (usually an number starting with 1000).  </p> <p>For AUTOKEY objects two columns are added in the Excel document!  </p> <ul> <li>The column PMNUM. This is the autokey column which is filled by Maximo.  </li> <li>The column PMUID. This is the unique ID column and will also be written to the  Excel document (like for other objects)  </li> </ul> <p>Which objects use the autokey feature can be configured in the Organisations application.</p>"},{"location":"UserGuide/simple_import/#handling-of-key-values-by-business-logic-not-autokey","title":"Handling of Key Values by Business Logic (not AUTOKEY)","text":"<p>Primary keys of objects in Maximo can be specified during the import or the key values can be generated by Maximo with the Autonumber feature (the primary key column is then a AUTOKEY column, see above section). Another possibility is to use the Maximo business logic (Java classes, automation scripts) to set key values on object creation. These key values can be generated depending on other attribute values, they can be organized in number ranges or the key values can be obtained from another system altogether. Starting with the September 2016 release of the Data Management Tools there is better support for these type of key generation. Key values generated by Maximo (or modified by Maximo) can now be written back to the Excel import file! The processed response file then contains the keys which are actually used by the Maximo object. There are two new system properties (see chapter Configuration Options for the EAM Importer 12.1) which allow you to control the behaviour of this new feature.</p> <p>The following two examples should illustrate this feature:</p> <ol> <li> <p>Lets assume that the LOCATION attribute in the locations application is generated  by Maximo via the business logic according to some internal business needs. If you    do not specify a value for the LOCATION attribute, then the generated value is    written back to the Excel import file.    The import file:      will result in the following processed Excel file:     This feature also works for the specification import and the extended import.</p> </li> <li> <p>The second example is a JOBPLAN import. Here we can take advantage of this feature in the child object JOBTASK. The import file:   will reslut in the following processed response file:  The default installation of the EAM Datamangement Tools will insert the generated key calues in the processed Excel file only if the corresponding cell in the excel file was empty and the key value was not provided by the user.</p> </li> </ol> <p>If you set the system property \u201eEAM.Importer.KeyWriteback.RewriteChanged\" to true, then the final key values of the Maximo object are compared with the specified values in the Excel importfile and differences are written back to the Excel importfile.  </p> <p>Again an example: Most of the key attributes are defined as UPPER and any lowercase input is converted to the corresponding uppercase string. If you have set the system property \u201eEAM.Importer.KeyWriteback.RewriteChanged\" to 1 and import the following simple LOCATION example:  the resulting processed excel file would contain the LOCATION attribute value in uppercase:  </p>"},{"location":"UserGuide/simple_import/#setting-and-changing-object-status-during-the-import","title":"Setting and changing Object Status during the import","text":"<p>For imports and updates with the EAM Import tool you can include the attribute STATUS in the import file. The way of processing depends on whether the Maximo object is a stateful object (Mbo is an instance of StatefulMbo) or not. </p> <ul> <li>If the object is not stateful then the importer handles the STATUS attribute like every other attributes and simply set the attribute to the new value  </li> <li>If the object is stateful a changeStatus call for the Mbo (StatefulMbo) is executed.  </li> </ul> <p>For status changes during an initial import or an update corresponding entries for the status history are created and are visible in the status history dialogs (e.g. View Work Order History in application Work Order Tracking) You can also specify values for the attributes STATUSDATE and NP_STATUSMEMO The attributes STATUSDATE and NP_STATUSMEMO are ignored during the import if you do not set a value for the attribute STATUS.  </p> <p>With version 4 of the EAM Datamanagement Tools you can also change the status of child objects during an extended import.</p>"},{"location":"UserGuide/simple_import/#handling-of-time-and-datetime-values","title":"Handling of Time and Datetime values","text":"<p>Date and time values from the XLS import file are interpreted as local times for the user executing the import. Therefore, it is important th at you set a correct time zone in the user profile executing the imports. If no time zone is specified in the user profile the default timezone (the time zone from the Maximo server) is used (which might be correct if all your users and the server are in the same time zone).</p>"},{"location":"UserGuide/specification_import/","title":"Specification Import","text":"<p>The Specification Import allows you to:</p> <ol> <li>Insert new IBM Maximo objects together with their specification attributes</li> <li>Add a specification to a IBM Maximo object and set values for the specification    attributes</li> <li>Update specification attribute values</li> </ol> <p>The Specification Import can only be used for Maximo objects</p> <ul> <li>having a CLASSSTRUCTUREID attribute and  </li> <li>\"Specifications\" tab is available for in the application user interface. Please see the Property EAM.Importer.SheetNamePrefixSpecification</li> </ul>"},{"location":"UserGuide/specification_import/#create-an-excel-import-file","title":"Create an Excel import file","text":"<p>Since the Specification Import is an extension of the Simple Import mode, some key concepts remain the same. The Excel Format is the same as for the Simple Import except for the following conditions:  </p> <ul> <li>A worksheet in the Excel File contains the specification import data for one CLASSSTRUCTUREID.  </li> <li>A XLS import file for Specification import can contain more than one worksheet with data. This allows you to import different IBM Maximo objects with different CLASSSTRUCTUREID's within one import.  </li> <li>The name of the worksheet for the specification import starts with \"Specification_\" and is followed by the CLASSSTRUCTUREID.  </li> <li>After the last column of the main object attributes there is a separator column. The template generator with specification data and search result download with specification will insert an empty separation column with a red background colour.  </li> <li>The second row of the separator column contains the Name of the Specification object surrounded with \"!\", e.g. !ASSETSPEC!  </li> <li>On the right hand side of the separator column are the specification attributes for this CLASSSTRUCTUREID. The second row contains the specification attribute names.  </li> <li>Specification attributes can have one of three different data types. These are ALNVALUE, NUMVALUE or TABLEVALUE . The template generator for specification data or the XLS result download with specification data will colorize the specification attribute name. The colors are defined in the worksheet \"Colorlegende\" which is generated for every template or search result download.  </li> <li>Every Maximo object together with the specification attribute values have to be entered in one single row of the XLS worksheet.  </li> <li>If you want to insert new data together with the specification attributes into Maximo you must make sure, that the CLASSSTRUCTUREID attribute is set for the main object. This can be accomplished with either setting attribute directly on the main object (a column for the CLASSSTRUCTUREID is available for the main object) or by setting other attributes which implicitly s et the CLASSSTRUCTUREID (e.g. setting the rotating item (attribute ITEMNUM) for an ASSET)</li> </ul> <p>As stated above, attribute values of a main Object can be set to NULL (can be cleared) by letting the corresponding Excel cell empty. For specification attributes this behavior is different. If you want to set a specification attributes to NULL you have to use the special value ~null~ in the import file ! The reason for this different behavior is as follows: Assets can get default values for specification attributes from rotating items associated to them. Empty specification attributes in the import file would have overwritten those default values.</p> <p>Writing a XLS Import file from scratch is a time consuming and error prone task. It is therefore much more convenient t o generate an empty template and fill it with new data or download a search result with specification data. Please download a template or a search result with specification data and make yourself familiar with the file layout of the XLS document. The following screenshot shows the specification attributes for the CLASSSTRUCTID 1001 (PUMP CNTRFGL) used in the IBM Maximo demo database. Here you can see the red separation column and the specification attributes associated with this class structure. The third row contains a demo data set which has no functional impact and which can alternatively be cleared.</p> <p> Illustration 19: Screenshot XLS file with specification attributes</p>"},{"location":"UserGuide/specification_import/#download-a-template-with-specification-data","title":"Download a template with specification data","text":"<p>An empty XLS Template for the specification import can be downloaded via the action menu item \"EAM Data Management Tool\" \u2192 \"EAM Template for Spec Data\" (see Illustration 20: Select Action menu entry EAM Template for Spec Data).</p> <p> Illustration 20: Select Action menu entry EAM Template for Spec Data</p> <p>This command opens a dialog box where you can select the CLASSSTRUCTUREID for the template generator. For each selected CLASSSTRUCTUREID a template according to the specifications described above will appear in the result XLS template file.</p> <p> Illustration 21: Select Classification specification for XLS template</p> <p>If you click on the lookup you can select from the available classifications for the current man object</p> <p> Illustration 22: Select available Class Structure from Lookup Dialog</p> <p>After selecting the Classifications click OK. The template is generated and sent to the client where you are prompted to save or open the XLS file (depending on the client configuration).</p> <p> Illustration 23: Internet Explorer open for save dialog</p> <p>The template for the above selected classifications contains the following worksheets:</p> <p> Illustration 24: Screenshot Excel Worksheet names for multiple specifications in one file</p> <ul> <li>The worksheet \"Simple\" for the Simple import (see the above chapter for a description of the simple import)  </li> <li>The worksheets \"Specification_1001\", \"Specification_1002\",... for the selected classifications  </li> <li>The DataDictionary  </li> <li>The Colorlegende  </li> </ul> <p>Note: If a specification does not contain specification attributes then no worksheet for this specification is created! The CLASSSTRUCTUREID for those specifications can be set via the Simple Importer in the worksheet \"Simple\".</p>"},{"location":"UserGuide/specification_import/#download-a-search-result-with-specification-data","title":"Download a search result with specification data","text":"<p>If you want to update specification attributes of existing data (eg. Assets, Locations, Items) you could start by creating a \"Searchresult with Spec Data\" file that contains your existing data.</p> <p>To do so follow these steps:</p> <ol> <li>Use the Filter or the advanced search to limit the objects in the list view to those    you want to update  </li> <li>Select \"EAM XLS Searchresult with Spec Data\" from the action menu. </li> </ol> <p>The downloaded Excel document contains nearly all attributes of the Maximo Object.    This is similar to the simple search result download.    To update specification attributes and to import the downloaded Excel file this search    result is not best practice (you would need to delete a lot of attributes from the file    before you can re-import it). Therefore , in this case it is recommended to use    download templates</p> <p> Illustration 25: Select Action menu entry Download seach result with specification data</p> <ol> <li>The \"Create XLS Download out of search results with Specification\" Dialog will be    opened</li> </ol> <p> Illustration 26: Dialog Create XLS search result download with specification data</p> <ol> <li> <p>If you click OK, the XLS File will be generated and sent back to the client. The generated XLS file contains all records from the current search result in the list    view, but these records may be distributed across different worksheets.  </p> </li> <li> <p>If the Maximo object does not have an attribute CLASSSTRUCTUREID, it is on the    worksheet \"Simple\"  </p> </li> <li>If the attribute CLASSSTRUCTUREID is available and is empty the Maximo object is    also on the worksheet \"Simple\"  </li> <li>If the attribute CLASSSTRUCTUREID has a value but the specified specification does    not have specification attributes, then the Maximo object is also on the worksheet    \"Simple\"  </li> <li>If the attribute CLASSSTRUCTUREID has a value and there are specification    attributes for this specification, then the Maximo object is on the corresponding    worksheet for this specification, e.g. \"Specification_1001\" for CLASSSTRUCTUREID</li> </ol> <p>Before you can use the Template be sure to:  </p> <ul> <li>Remove any columns you do not want to set during the import  </li> <li>Keep the unique ID colu mn in the template (these attributes have a light green background). For new data leave the field empty and the importer will insert the unique ID value for the newly created Maximo object in this column.  </li> <li>Remove worksheets for CLASSSTRUCTUREID where no dat a should be inserted.</li> </ul>"},{"location":"UserGuide/specification_import/#execute-the-import","title":"Execute the import","text":""},{"location":"UserGuide/specification_import/#xls-file-upload","title":"XLS File Upload","text":"<p>The import or update of specification data is started from the action menu in the list view of the application.</p> <p>The following dialog is opened:</p> <p></p> <p>Select the file from your file system and press the \"Import Data\" button. The XLS file is sent to the Maximo server and will be processed.</p>"},{"location":"UserGuide/specification_import/#processing-steps-for-the-specification-import","title":"Processing Steps for the Specification Import","text":"<p>The Excel file will be analyzed. The following checks are performed:  </p> <ul> <li>Is the uploaded file an Excel document  </li> <li>Are there any worksheets were the name starts with \"Specification_\"  </li> <li>Are there attribute names in the second row of the worksheets  </li> <li>Are the attribute names on the worksheet unique  </li> <li>Are data rows in the worksheet available  </li> <li>Is there a separation column between the attributes of the target object and the specification attributes  </li> <li>Is the CLASSSTRUCTUREID parsed from the worksheet name valid  </li> <li>In case of an error, an error message is displayed to the user and the import of this worksheet is canceled.  </li> <li>Analyzing the target object (the current application object)  </li> <li>Check if the target object is valid. The name is automatically determined based on the Maximo application from where the import is started.  </li> <li>Determine the object type. Is it a System Object (e.g. PERSON), SITE Object (e.g. LOCATION, ASSET,...) or a ORG Object (e.g.. LABOR, CRAFT,...).  </li> <li>Determine the unique ID attribute name. This is unique for every object and assigned internally from Maximo. For example ASSETUID for Asset Objects or LABORID for Labor objects.  </li> <li>Determine the key attribute(s) of the object.  </li> <li>Check if all required attributes are available in the Excel document.  </li> <li>In case of an error, an error message is displayed to the user and the import is canceled.  </li> </ul> <p>For every data row (remember: starting from row fo ur in the Excel file) do the following:</p> <ul> <li>Based on the information (available attributes in the excel document, known properties of the object type like key attributes, unique attributes, object type and the available data in Maximo) decide if we update existing data or insert new data.  </li> <li>Prior to creating a new object the default insert SiteID, default insert OrgID, default ItemSet and default CompSet are set on the MBO Set (depending on the object type)  </li> <li>For a new object the key attributes are set first.  </li> <li>Set other attributes in the same order as they appear in the Excel document. The specification attributes are not yet set!  </li> <li>Save the object ( the specification attributes are inherited during the save method)  </li> <li>Set the specification attributes for this object. The specification attributes are only set if they have a value in the XLS file. Otherwise, the default value of this attribute from the Classification (or from the rotating item for ASSETS) is preserved.</li> </ul> <p>If there is an error (either during setting of attributes or during saving) the behavior depends on the processing mode. If no column $IMPORTERROR is available in your worksheet (processing mode \"Stop on Error\") an error message is displayed to the user and the import is aborted. Every error message during import contains the line number of the Excel file and the attribute name which causes the problem. If a column $IMPORTERROR is available (processing mode \"Continue on Error\") the error message is not displayed to the user but written to the $IMPORTERROR column of the corresponding row. Also, the problematic attribute is highlighted with a red background and the import is not aborted but continues with the next row.</p>"},{"location":"UserGuide/specification_import/#notice","title":"NOTICE","text":"<ul> <li>Contrary to the Simple Import no columns can be added to the XLS worksheets for the specification import (the XLS handling library does not allow to insert columns in the middle of the worksheet in front of the separation column). However, if the unique ID name column is available but empty , then the value is inserted into the XLS file.  </li> <li>If an attribute in the Excel document left of the separation column is empty (no value in the Excel cell) then the attribute is set to NULL. It is therefore important to remove all columns from the excel document which should or cannot set to null or fill all columns with the appropriate values  </li> <li>Object attributes are only set if the new value from the Excel document is different from the current value in the MBO! Specification attributes are always set to the given value.  </li> <li>Since V6 of maximex the specification attribute data type DATE is also supported</li> <li>Since 6.1.0 of maximex, the specification attribute data type DATE is also supported when created according to the description How do I add a Date/Time Data Type Value to a Classification Attribute</li> </ul>"},{"location":"UserGuide/specification_import/#after-the-import","title":"After the import","text":"<p>The steps after processing of the uploaded XLS file (display import summary dialog, download of the processed XLS file to the client, update list view of the application) are identical to the Simple Import and are not repeated here.</p>"},{"location":"installation/Change%20history/","title":"Change history","text":"Version Date Author Change Rev. 001 Voller First draft for new installation routine. Rev. 002 11.12.10 DI Wolfgang FIEDLER Corrections, clarifications, some new screenshots, footer with BP Logo, font,... Rev. 003 09.02.11 Reiner Voss Clarifications and additional points concerning Version 1.5. Standardization for Maximo 6 and Maximo 7 Rev. 004 18.10.11 DI Wolfgang FIEDLER Include installation instructions for LDAP environments, WebSphere Client installation and configuration. Rev. 005 27.01.12 DI Wolfgang FIEDLER Include manual installation steps without using provided scripts. Rev. 006 14.04.13 DI Wolfgang FIEDLER Updates for Version 2 with XLSX support, new Business Partner Image. Rev. 007 09.05.13 DI Wolfgang FIEDLER Remove Maximo 6 content. New parameters for 30InstallEAMImporter.bat, system properties for License Key and XLSX support, additional step for Maximo 7.1 BEA Weblogic. Rev. 008 27.05.13 DI Wolfgang FIEDLER New screenshots, described removal of old jxl.jar reference. Rev. 009 11.06.13 DI Wolfgang FIEDLER Add Table XLS download extension installation. Rev. 010 21.02.15 DI Wolfgang FIEDLER Added installation instructions for Maximo 7.5.0.7 and 7.6. Explained where to find the system properties. Rev. 011 17.03.15 DI Wolfgang Fiedler Added info about 00install.bat, small updates in LDAP install (untested), new screenshot with all sigoptions including Keyupdate. Rev. 012 20.03.15 DI Wolfgang Fiedler Version bump from V2 to V3. Rev. 013 30.12.16 DI Wolfgang Fiedler Clarification on where to find the RMI information for the server. Rev. 014 04.01.17 DI Wolfgang Fiedler Version bump from V3 to V4. New screenshots for the installation, information for GNU/Linux and UNIX installation added. Rev. 015 March 2017 DI Wolfgang FIEDLER Small addition: All system properties are now created during import with default values. Rev. 016 Feb. 2018 DI Wolfgang FIEDLER Removed the chapter for editing the web.xml file. Not required anymore because the servlet was replaced with a JSP file. Rev. 017 June 2018 DI Wolfgang FIEDLER Complete rewrite for the new TPAE Config Tool based installation. Rev. 018 November 2018 DI Wolfgang FIEDLER Added a new chapter for uninstalling the tool. Included a step to remove all Apache POI versions prior to 3.17 (distributed with maximex). Rev. 019 April 2025 Pawel Nowicki Rebranding to maximex. Transform to HTML Page."},{"location":"installation/Enable%20the%20maximex%20in%20your%20applications/","title":"Enable the maximex in your applications","text":"<p>Enabling the tool in an application is a two step process.</p> <ol> <li>Create the required sigoptions</li> <li>Enable the sigoptions in the Security Groups application</li> </ol>"},{"location":"installation/Enable%20the%20maximex%20in%20your%20applications/#create-the-sigoptions-in-the-application","title":"Create the Sigoptions in the application","text":"<p>If you want to enable the tool in an application within Maximo then</p> <ul> <li>open the application in the application designer</li> <li>execute the action menu entry \u201cCreate maximex Sigoptions\u201d</li> </ul> <p></p> <p>This creates the requires signature options and searchbar menu entries for the tool. A message is displayed once the process is finished.</p> <p></p> <p>The action menu entry \"Grant maximex Permissions to MAXADMIN Group\" is a convenient way to enable the sigoptions of the tool to the MAXADMIN group. To grant options to other groups use the security groups applications.</p> <p></p>"},{"location":"installation/Enable%20the%20maximex%20in%20your%20applications/#grant-the-maximex-signature-options-to-security-groups","title":"Grant the maximex Signature Options to Security Groups","text":"<p>The signature options for maximex all start with the prefix \"EAM\" in their description. Grant (some of) these sigoptions to your security groups according to your business needs.</p> <p></p> <p>Changed security settings only take effect after the user log out and relogin to Maximo.</p>"},{"location":"installation/Execute%20the%20TPAE%20Configuration%20Program/","title":"Execute the TPAE Configuration Program","text":"<p>Start the TPAE Configuration Program from your start menu or desktop icon or start it from the command line (e.g. <code>D:\\IBM\\SMP\\ConfigTool\\ConfigUI.exe</code>)</p> <p></p> <p></p> <p>Choose \u201cUpdate Database and Build and Deploy Application EAR Files\u201d.</p> <p></p> <p>Klick Next</p> <p></p> <p>and then click Finish.</p> <p>The product is installed, the EAR file is rebuilt and redeployed to the application server.</p> <p>Once the process is finished you should see an information dialog</p> <p></p>"},{"location":"installation/Finish%20the%20installation/","title":"Finish the installation","text":"<p>This chapter finishes describes the final steps to finish the installation of the maximex tool.</p> <ul> <li>Repeat the previous chapter\u2019s steps for all Maximo applications where you want to use maximex.</li> <li> <p>Install the License Keys for maximex:</p> <ul> <li>Save the provided ModuleKey in System Properties with the property name <code>EAM.DataManagementTool.ModuleKey</code>.</li> <li>Save the provided AppKey in System Property with the property name <code>EAM.DataManagementTool.AppKey</code></li> </ul> </li> <li> <p>In Maximo go to the System Properties application and search for <code>EAM</code>. All the System Properties for maximex are created with useful default values. Update any values if required.</p> </li> <li>Read the user manual. It contains valuable information and helps you get startet.</li> </ul> <p>After installation, you can verify the maximex installation via the System Information dialog:</p> <p></p> <p>If maximex is enabled in your application and you have the necessary permissions, you will see:  - A search bar menu entry.  - Additional entries in the Select Action menu.</p> <p></p> <p> </p> <p>Once these steps are completed, maximex is fully installed in IBM Maximo.</p>"},{"location":"installation/Install%20required%20files/","title":"Install required files","text":"<p>The maximex installer is started either via the windows explorer or in a command window. The installer</p> <ul> <li>copies required files in the Maximo installation directory (.class files, installation files, scripts, .jar libraries, documentation, etc.)</li> <li>overwrites any older version of the software</li> </ul> <p></p> <p>The next page contains the End-User License Agreement (EULA). You can only continue with the installation if you accept the terms of the license agreement.</p> <p></p> <p>In the next panel you need to select your installation path. Browse and select your existing IBM Maximo installation directory  e.g.  <code>D:\\IBM\\SMP\\maximo</code>!</p> <p></p> <p>The correct directory contains the subdirectories applications, appserver, deployment, resources, tools,...  Click Next. The destination directory is validated and an error message is displayed, if the selected directory is not a valid Maximo installation folder. Technically the installer is looking for either <code>&lt;INSTALLDIR&gt;\\applications\\maximo\\properties\\product\\mam.xml</code>  or  <code>&lt;INSTALLDIR&gt;\\applications\\maximo\\properties\\product\\tpae.xml</code>.</p> <p></p> <p>Choose all and start installation by clicking Next.</p> <p></p> <p>The Installation starts and the selected packages are installed on the system. After the installation is finished click Next.</p> <p></p> <p>After all the files are in place some required modifications are made.</p> <p></p> <p>Click Done. The basic installation is finished.</p> <p></p> <p>The basic installation of the files is finished. The required files for the following steps are located in <code>&lt;MAXIMO&gt;\\tools\\maximo</code> <code>&lt;MAXIMO&gt;\\tools\\maximo\\EAMImporter</code> where <code>&lt;MAXIMO&gt;</code> is the path of your IBM Maximo installation.</p>"},{"location":"installation/Preliminaries/","title":"Preliminaries","text":"<ol> <li>Installation should be executed on the Maximo administrative workstation. This is the machine where the Maximo installation is located and where you can build the Maximo ear files.</li> <li> <p>During the installation additional files will be copied into the Maximo installation directory tree. Later some configuration files will be modified.</p> <p>It is strongly recommended to:</p> <ul> <li>Create a complete backup of your Maximo installation directory (e.g. <code>D:\\IBM\\SMP</code>) before starting the installation.</li> <li>Perform the first installation on a development system before deploying to production.</li> </ul> </li> <li> <p>maximex is delivered as a Java executable archive (JAR file). Its filename will resemble: <code>maximex_TPAE7.6.1.3-6.1.0.0.jar</code></p> </li> <li> <p>The installer requires a JRE 8, JDK 8 or later. You can use:</p> <ul> <li>The JRE/JDK from <code>&lt;MAXIMO&gt;\\sdk</code> or <code>&lt;MAXIMO&gt;\\jre</code>, or</li> <li>The JDK from your application server.</li> </ul> </li> <li> <p>Copy the distributed jar file to a temporary directory, (e.g. <code>c:\\temp</code>).</p> </li> <li> <p>To start the installer:</p> <ul> <li>Open Windows Explorer and navigate to your temporary directory.</li> <li>Double-click the maximex JAR file, or</li> <li>Right-click \u2192 Open with... \u2192 Java Platform SE binary</li> </ul> </li> <li> <p>If starting via Explorer fails:</p> <p>Open a Command Prompt and execute:</p> <p><code>{path}java.exe  -jar  {path}{maximex jar file}</code></p> <p>Example:</p> <p><code>D:\\Java\\jdk1.8\\bin\\java.exe -jar C:\\temp\\maximex_TPAE7.6.1.3-6.1.0.0.jar</code></p> </li> </ol>"},{"location":"installation/Remove%20old%20Apache%20POI%20versions/","title":"Remove old Apache POI versions","text":"<p>maximex also copies version 3.17 of the Apache POI library on your system.</p> <p>Version 3.17 is currently the latest and most secure version of this library.</p> <ul> <li>Maximo versions 7.6.1 and 7.6.0.9 with current IFIXes already include version 3.17. If your system already uses this version, you can skip this step.</li> <li>Previous versions of this library contain known security vulnerabilities. For details, refer to the Apache \u00bb POI : Security Vulnerabilities, CVEs.</li> </ul> <p>If older versions are present, remove all files matching <code>poi*3.14*.jar</code> or <code>poi*3.16*.jar</code> from the following directory: <code>&lt;MAXIMO&gt;/maximo/applications/maximo/lib</code></p>"},{"location":"installation/Uninstalling%20the%20maximex/","title":"Uninstalling the maximex","text":"<p>If you ever have to uninstall the tool then follow the steps below to remove all files, directories and artifacts in the Maximo database.</p> <ul> <li>Stop your Maximo Server</li> <li>If you have configured any Crontasks for periodic import and export then remove those crontask instances in Maximo.</li> <li>Locate and review the SQL file DeinstallEAMImporter.sql. This file can be found in the directory <code>&lt;Maximo_Path&gt;/maximo/tools/maximo/EAMImporter</code>. The scripts removes all traces of maximex from the Maximo database.</li> <li>Execute the SQL Script in your Maximo database. The script removes all the information which was created during installation and usage of maximex. These are<ul> <li>The persistent Tables <code>EAMIMPORT</code>, <code>EAMUPDATEFILTER</code>, <code>EAMUPDHISTLOG</code> and <code>EAMUPDHIST</code></li> <li>The signature options for the tool from the <code>SIGOPTIONS</code> and the <code>APPLICATIONAUTH</code> tables</li> <li>The <code>MAXMENU</code> entries</li> <li><code>MAXOBJECT</code>, <code>MAXOBJECTCFG</code>, <code>MAXATTRIBUTE</code>, <code>MAXATTRIBUTECFG</code>, <code>MAXTABLE</code>, <code>MAXTABLECFG</code>, <code>AUTOKEY</code> and <code>MAXSEQUENCE</code> information for the tools objects and attributes</li> <li>Key and index information for the objects</li> <li>Relationships where the objects of maximex are either parent or child</li> <li>The <code>ALNDOMAIN</code> for the importmode</li> <li>All the messages for maximex</li> <li>The Maximo Properties and their values</li> <li>The <code>MAXVAR</code> setting for EAMIMPORT</li> </ul> </li> <li>On the Admin workstation remove the following files and directories from your Maximo installation directory  (e.g. <code>D:\\IBM\\SMP\\maximo</code>):<ul> <li><code>$INSTALL_PATH/applications/maximo/businessobjects/classes/de/eam</code></li> <li><code>$INSTALL_PATH/applications/maximo/maximouiweb/webmodule/webclient/skins/mobile/images/menu_icon_eam.gif</code></li> <li><code>$INSTALL_PATH/applications/maximo/maximouiweb/webmodule/webclient/skins/tivoli09/images/menu_icon_eam.gif</code></li> <li><code>$INSTALL_PATH/applications/maximo/maximouiweb/webmodule/webclient/skins/tivoli13/images/menu_icon_eam.gif</code></li> <li><code>$INSTALL_PATH/applications/maximo/maximouiweb/webmodule/webclient/skins/iot18/images/menu_icon_eam.gif</code></li> <li><code>$INSTALL_PATH/applications/maximo/maximouiweb/webmodule/webclient/images/menu_icon_eam.gif</code></li> <li><code>$INSTALL_PATH/applications/maximo/maximouiweb/webmodule/webclient/skins/mobile/images/ab_menu_icon_eam.gif</code></li> <li><code>$INSTALL_PATH/applications/maximo/maximouiweb/webmodule/webclient/skins/tivoli09/images/ab_menu_icon_eam.gif</code></li> <li><code>$INSTALL_PATH/applications/maximo/maximouiweb/webmodule/webclient/skins/tivoli13/images/ab_menu_icon_eam.gif</code></li> <li><code>$INSTALL_PATH/applications/maximo/maximouiweb/webmodule/webclient/skins/iot18/images/ab_menu_icon_eam.gif</code></li> <li><code>$INSTALL_PATH/applications/maximo/maximouiweb/webmodule/webclient/images/ab_menu_icon_eam.gif</code></li> <li><code>$INSTALL_PATH/applications/maximo/maximouiweb/webmodule/webclient/common/eamdmtrequesthandler.jsp</code></li> <li><code>$INSTALL_PATH/deployment/product/EAMDataManagementTool.xml</code></li> <li><code>$INSTALL_PATH/applications/maximo/properties/product/eamimport.xml</code></li> <li><code>$INSTALL_PATH/tools/maximo/EAMImporter/</code></li> <li><code>$INSTALL_PATH/tools/maximo/classes/de/eam/</code></li> <li><code>$INSTALL_PATH/applications/maximo/maximouiweb/webmodule/WEB-INF/classes/de/eam/</code></li> <li><code>$INSTALL_PATH/applications/maximo/maximouiweb/webmodule/WEB-INF/classes/de_eam/</code></li> <li><code>$INSTALL_PATH/tools/maximo/en/eamimport/</code></li> <li><code>$INSTALL_PATH/tools/maximo/de/xliff/eamimport/</code></li> </ul> </li> <li>From the file <code>$INSTALL_PATH/tools/maximo/classes/psdi/xlate/TDTDefaultPMP.xml</code> remove the <code>&lt;product&gt;eamimport&lt;/product&gt;</code> xml entry.</li> <li>Rebuild and redeploy the Maximo EAR file</li> <li>Restart the Maximo application server</li> <li>From the <code>LIBRARY.xml</code> file remove the dialogs with the following id\u2019s:<ul> <li><code>eamdmtversion</code></li> <li><code>EAMKEY2</code></li> <li><code>EAMKEYUPD</code></li> <li><code>eamappltmp</code></li> <li><code>eamtempl</code></li> <li><code>fldupdhist</code></li> <li><code>EAMSEARCH</code></li> <li><code>eamimphist</code></li> <li><code>updfilter</code></li> <li><code>xlsdlrsls</code></li> <li><code>xlsdlrsle</code></li> <li><code>xlstemps</code></li> <li><code>xlsdlrslt</code></li> <li><code>pushXLS</code></li> <li><code>xlstempe</code></li> <li><code>eamupltmpl</code></li> <li><code>uploadxls</code></li> <li><code>xlstempl</code></li> <li><code>updatefld</code></li> </ul> </li> <li>From the <code>LIBRARY.xml</code> remove the action with the id <code>MASSDEL</code></li> <li>From the <code>LOOKUPS.xml</code> remove the tables with the following id\u2019s:<ul> <li><code>maxattributeupd</code></li> <li><code>maxrelationship</code></li> <li><code>eamclassstructure</code></li> </ul> </li> </ul> <p>Now maximex is completely removed from your Admin workstation and from the Maximo database.</p>"}]}